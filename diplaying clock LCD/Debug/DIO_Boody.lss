
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00003462  000034d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002b68  00000000  00000000  000034f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d6e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000707a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000aabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ad49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ba 19 	call	0x3374	; 0x3374 <main>
      7a:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e7       	ldi	r26, 0x74	; 116
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	39 87       	std	Y+9, r19	; 0x09
     b58:	28 87       	std	Y+8, r18	; 0x08
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	99 85       	ldd	r25, Y+9	; 0x09
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	39 f0       	breq	.+14     	; 0xb70 <M_DIO_void_SetPinDirection+0x3a>
     b62:	28 85       	ldd	r18, Y+8	; 0x08
     b64:	39 85       	ldd	r19, Y+9	; 0x09
     b66:	21 30       	cpi	r18, 0x01	; 1
     b68:	31 05       	cpc	r19, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <M_DIO_void_SetPinDirection+0x38>
     b6c:	76 c0       	rjmp	.+236    	; 0xc5a <M_DIO_void_SetPinDirection+0x124>
     b6e:	e4 c0       	rjmp	.+456    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	3f 83       	std	Y+7, r19	; 0x07
     b78:	2e 83       	std	Y+6, r18	; 0x06
     b7a:	8e 81       	ldd	r24, Y+6	; 0x06
     b7c:	9f 81       	ldd	r25, Y+7	; 0x07
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	91 05       	cpc	r25, r1
     b82:	61 f1       	breq	.+88     	; 0xbdc <M_DIO_void_SetPinDirection+0xa6>
     b84:	2e 81       	ldd	r18, Y+6	; 0x06
     b86:	3f 81       	ldd	r19, Y+7	; 0x07
     b88:	23 30       	cpi	r18, 0x03	; 3
     b8a:	31 05       	cpc	r19, r1
     b8c:	34 f4       	brge	.+12     	; 0xb9a <M_DIO_void_SetPinDirection+0x64>
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	69 f0       	breq	.+26     	; 0xbb2 <M_DIO_void_SetPinDirection+0x7c>
     b98:	cf c0       	rjmp	.+414    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
     b9a:	2e 81       	ldd	r18, Y+6	; 0x06
     b9c:	3f 81       	ldd	r19, Y+7	; 0x07
     b9e:	23 30       	cpi	r18, 0x03	; 3
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f1       	breq	.+98     	; 0xc06 <M_DIO_void_SetPinDirection+0xd0>
     ba4:	8e 81       	ldd	r24, Y+6	; 0x06
     ba6:	9f 81       	ldd	r25, Y+7	; 0x07
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <M_DIO_void_SetPinDirection+0x7a>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <M_DIO_void_SetPinDirection+0xfa>
     bb0:	c3 c0       	rjmp	.+390    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <M_DIO_void_SetPinDirection+0x9a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <M_DIO_void_SetPinDirection+0x96>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	ae c0       	rjmp	.+348    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
     bdc:	a7 e3       	ldi	r26, 0x37	; 55
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e3       	ldi	r30, 0x37	; 55
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <M_DIO_void_SetPinDirection+0xc4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <M_DIO_void_SetPinDirection+0xc0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	99 c0       	rjmp	.+306    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
     c06:	a4 e3       	ldi	r26, 0x34	; 52
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <M_DIO_void_SetPinDirection+0xee>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <M_DIO_void_SetPinDirection+0xea>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	84 c0       	rjmp	.+264    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
     c30:	a1 e3       	ldi	r26, 0x31	; 49
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <M_DIO_void_SetPinDirection+0x118>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <M_DIO_void_SetPinDirection+0x114>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	6f c0       	rjmp	.+222    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	3d 83       	std	Y+5, r19	; 0x05
     c62:	2c 83       	std	Y+4, r18	; 0x04
     c64:	8c 81       	ldd	r24, Y+4	; 0x04
     c66:	9d 81       	ldd	r25, Y+5	; 0x05
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	91 05       	cpc	r25, r1
     c6c:	51 f1       	breq	.+84     	; 0xcc2 <M_DIO_void_SetPinDirection+0x18c>
     c6e:	2c 81       	ldd	r18, Y+4	; 0x04
     c70:	3d 81       	ldd	r19, Y+5	; 0x05
     c72:	23 30       	cpi	r18, 0x03	; 3
     c74:	31 05       	cpc	r19, r1
     c76:	34 f4       	brge	.+12     	; 0xc84 <M_DIO_void_SetPinDirection+0x14e>
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	9d 81       	ldd	r25, Y+5	; 0x05
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	91 05       	cpc	r25, r1
     c80:	61 f0       	breq	.+24     	; 0xc9a <M_DIO_void_SetPinDirection+0x164>
     c82:	5a c0       	rjmp	.+180    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
     c84:	2c 81       	ldd	r18, Y+4	; 0x04
     c86:	3d 81       	ldd	r19, Y+5	; 0x05
     c88:	23 30       	cpi	r18, 0x03	; 3
     c8a:	31 05       	cpc	r19, r1
     c8c:	71 f1       	breq	.+92     	; 0xcea <M_DIO_void_SetPinDirection+0x1b4>
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
     c90:	9d 81       	ldd	r25, Y+5	; 0x05
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	91 05       	cpc	r25, r1
     c96:	e9 f1       	breq	.+122    	; 0xd12 <M_DIO_void_SetPinDirection+0x1dc>
     c98:	4f c0       	rjmp	.+158    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <M_DIO_void_SetPinDirection+0x182>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <M_DIO_void_SetPinDirection+0x17e>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	3b c0       	rjmp	.+118    	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
     cc2:	a7 e3       	ldi	r26, 0x37	; 55
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <M_DIO_void_SetPinDirection+0x1aa>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <M_DIO_void_SetPinDirection+0x1a6>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	27 c0       	rjmp	.+78     	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
     cea:	a4 e3       	ldi	r26, 0x34	; 52
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e4 e3       	ldi	r30, 0x34	; 52
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <M_DIO_void_SetPinDirection+0x1d2>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <M_DIO_void_SetPinDirection+0x1ce>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	13 c0       	rjmp	.+38     	; 0xd38 <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
     d12:	a1 e3       	ldi	r26, 0x31	; 49
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e1 e3       	ldi	r30, 0x31	; 49
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <M_DIO_void_SetPinDirection+0x1fa>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <M_DIO_void_SetPinDirection+0x1f6>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
     d38:	29 96       	adiw	r28, 0x09	; 9
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	29 97       	sbiw	r28, 0x09	; 9
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	6a 83       	std	Y+2, r22	; 0x02
     d62:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	39 87       	std	Y+9, r19	; 0x09
     d6c:	28 87       	std	Y+8, r18	; 0x08
     d6e:	88 85       	ldd	r24, Y+8	; 0x08
     d70:	99 85       	ldd	r25, Y+9	; 0x09
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	39 f0       	breq	.+14     	; 0xd84 <M_DIO_void_SetPinValue+0x3a>
     d76:	28 85       	ldd	r18, Y+8	; 0x08
     d78:	39 85       	ldd	r19, Y+9	; 0x09
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <M_DIO_void_SetPinValue+0x38>
     d80:	76 c0       	rjmp	.+236    	; 0xe6e <M_DIO_void_SetPinValue+0x124>
     d82:	e4 c0       	rjmp	.+456    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	3f 83       	std	Y+7, r19	; 0x07
     d8c:	2e 83       	std	Y+6, r18	; 0x06
     d8e:	8e 81       	ldd	r24, Y+6	; 0x06
     d90:	9f 81       	ldd	r25, Y+7	; 0x07
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	61 f1       	breq	.+88     	; 0xdf0 <M_DIO_void_SetPinValue+0xa6>
     d98:	2e 81       	ldd	r18, Y+6	; 0x06
     d9a:	3f 81       	ldd	r19, Y+7	; 0x07
     d9c:	23 30       	cpi	r18, 0x03	; 3
     d9e:	31 05       	cpc	r19, r1
     da0:	34 f4       	brge	.+12     	; 0xdae <M_DIO_void_SetPinValue+0x64>
     da2:	8e 81       	ldd	r24, Y+6	; 0x06
     da4:	9f 81       	ldd	r25, Y+7	; 0x07
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	69 f0       	breq	.+26     	; 0xdc6 <M_DIO_void_SetPinValue+0x7c>
     dac:	cf c0       	rjmp	.+414    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
     dae:	2e 81       	ldd	r18, Y+6	; 0x06
     db0:	3f 81       	ldd	r19, Y+7	; 0x07
     db2:	23 30       	cpi	r18, 0x03	; 3
     db4:	31 05       	cpc	r19, r1
     db6:	89 f1       	breq	.+98     	; 0xe1a <M_DIO_void_SetPinValue+0xd0>
     db8:	8e 81       	ldd	r24, Y+6	; 0x06
     dba:	9f 81       	ldd	r25, Y+7	; 0x07
     dbc:	84 30       	cpi	r24, 0x04	; 4
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <M_DIO_void_SetPinValue+0x7a>
     dc2:	40 c0       	rjmp	.+128    	; 0xe44 <M_DIO_void_SetPinValue+0xfa>
     dc4:	c3 c0       	rjmp	.+390    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
     dc6:	ab e3       	ldi	r26, 0x3B	; 59
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	eb e3       	ldi	r30, 0x3B	; 59
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <M_DIO_void_SetPinValue+0x9a>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <M_DIO_void_SetPinValue+0x96>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	ae c0       	rjmp	.+348    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
     df0:	a8 e3       	ldi	r26, 0x38	; 56
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e3       	ldi	r30, 0x38	; 56
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <M_DIO_void_SetPinValue+0xc4>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <M_DIO_void_SetPinValue+0xc0>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	99 c0       	rjmp	.+306    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
     e1a:	a5 e3       	ldi	r26, 0x35	; 53
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e3       	ldi	r30, 0x35	; 53
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <M_DIO_void_SetPinValue+0xee>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <M_DIO_void_SetPinValue+0xea>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	84 c0       	rjmp	.+264    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
     e44:	a2 e3       	ldi	r26, 0x32	; 50
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e2 e3       	ldi	r30, 0x32	; 50
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <M_DIO_void_SetPinValue+0x118>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <M_DIO_void_SetPinValue+0x114>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	6f c0       	rjmp	.+222    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3d 83       	std	Y+5, r19	; 0x05
     e76:	2c 83       	std	Y+4, r18	; 0x04
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	51 f1       	breq	.+84     	; 0xed6 <M_DIO_void_SetPinValue+0x18c>
     e82:	2c 81       	ldd	r18, Y+4	; 0x04
     e84:	3d 81       	ldd	r19, Y+5	; 0x05
     e86:	23 30       	cpi	r18, 0x03	; 3
     e88:	31 05       	cpc	r19, r1
     e8a:	34 f4       	brge	.+12     	; 0xe98 <M_DIO_void_SetPinValue+0x14e>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	61 f0       	breq	.+24     	; 0xeae <M_DIO_void_SetPinValue+0x164>
     e96:	5a c0       	rjmp	.+180    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
     e98:	2c 81       	ldd	r18, Y+4	; 0x04
     e9a:	3d 81       	ldd	r19, Y+5	; 0x05
     e9c:	23 30       	cpi	r18, 0x03	; 3
     e9e:	31 05       	cpc	r19, r1
     ea0:	71 f1       	breq	.+92     	; 0xefe <M_DIO_void_SetPinValue+0x1b4>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	91 05       	cpc	r25, r1
     eaa:	e9 f1       	breq	.+122    	; 0xf26 <M_DIO_void_SetPinValue+0x1dc>
     eac:	4f c0       	rjmp	.+158    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
     eae:	ab e3       	ldi	r26, 0x3B	; 59
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	eb e3       	ldi	r30, 0x3B	; 59
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <M_DIO_void_SetPinValue+0x182>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <M_DIO_void_SetPinValue+0x17e>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	3b c0       	rjmp	.+118    	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
     ed6:	a8 e3       	ldi	r26, 0x38	; 56
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <M_DIO_void_SetPinValue+0x1aa>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <M_DIO_void_SetPinValue+0x1a6>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
     efe:	a5 e3       	ldi	r26, 0x35	; 53
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <M_DIO_void_SetPinValue+0x1d2>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <M_DIO_void_SetPinValue+0x1ce>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	13 c0       	rjmp	.+38     	; 0xf4c <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
     f26:	a2 e3       	ldi	r26, 0x32	; 50
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e2 e3       	ldi	r30, 0x32	; 50
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <M_DIO_void_SetPinValue+0x1fa>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <M_DIO_void_SetPinValue+0x1f6>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
     f4c:	29 96       	adiw	r28, 0x09	; 9
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <M_DIO_void_PinTog+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <M_DIO_void_PinTog+0x8>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3c 83       	std	Y+4, r19	; 0x04
     f76:	2b 83       	std	Y+3, r18	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	51 f1       	breq	.+84     	; 0xfd6 <M_DIO_void_PinTog+0x78>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	23 30       	cpi	r18, 0x03	; 3
     f88:	31 05       	cpc	r19, r1
     f8a:	34 f4       	brge	.+12     	; 0xf98 <M_DIO_void_PinTog+0x3a>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	61 f0       	breq	.+24     	; 0xfae <M_DIO_void_PinTog+0x50>
     f96:	5a c0       	rjmp	.+180    	; 0x104c <M_DIO_void_PinTog+0xee>
     f98:	2b 81       	ldd	r18, Y+3	; 0x03
     f9a:	3c 81       	ldd	r19, Y+4	; 0x04
     f9c:	23 30       	cpi	r18, 0x03	; 3
     f9e:	31 05       	cpc	r19, r1
     fa0:	71 f1       	breq	.+92     	; 0xffe <M_DIO_void_PinTog+0xa0>
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	91 05       	cpc	r25, r1
     faa:	e9 f1       	breq	.+122    	; 0x1026 <M_DIO_void_PinTog+0xc8>
     fac:	4f c0       	rjmp	.+158    	; 0x104c <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <M_DIO_void_PinTog+0x6e>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <M_DIO_void_PinTog+0x6a>
     fd0:	84 27       	eor	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	3b c0       	rjmp	.+118    	; 0x104c <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <M_DIO_void_PinTog+0x96>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <M_DIO_void_PinTog+0x92>
     ff8:	84 27       	eor	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	27 c0       	rjmp	.+78     	; 0x104c <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <M_DIO_void_PinTog+0xbe>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <M_DIO_void_PinTog+0xba>
    1020:	84 27       	eor	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	13 c0       	rjmp	.+38     	; 0x104c <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <M_DIO_void_PinTog+0xe6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <M_DIO_void_PinTog+0xe2>
    1048:	84 27       	eor	r24, r20
    104a:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <M_DIO_U8_PinRead+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <M_DIO_U8_PinRead+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    106c:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3d 83       	std	Y+5, r19	; 0x05
    1076:	2c 83       	std	Y+4, r18	; 0x04
    1078:	4c 81       	ldd	r20, Y+4	; 0x04
    107a:	5d 81       	ldd	r21, Y+5	; 0x05
    107c:	42 30       	cpi	r20, 0x02	; 2
    107e:	51 05       	cpc	r21, r1
    1080:	41 f1       	breq	.+80     	; 0x10d2 <M_DIO_U8_PinRead+0x78>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <M_DIO_U8_PinRead+0x3e>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	21 30       	cpi	r18, 0x01	; 1
    1092:	31 05       	cpc	r19, r1
    1094:	61 f0       	breq	.+24     	; 0x10ae <M_DIO_U8_PinRead+0x54>
    1096:	52 c0       	rjmp	.+164    	; 0x113c <M_DIO_U8_PinRead+0xe2>
    1098:	4c 81       	ldd	r20, Y+4	; 0x04
    109a:	5d 81       	ldd	r21, Y+5	; 0x05
    109c:	43 30       	cpi	r20, 0x03	; 3
    109e:	51 05       	cpc	r21, r1
    10a0:	51 f1       	breq	.+84     	; 0x10f6 <M_DIO_U8_PinRead+0x9c>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	91 05       	cpc	r25, r1
    10aa:	b9 f1       	breq	.+110    	; 0x111a <M_DIO_U8_PinRead+0xc0>
    10ac:	47 c0       	rjmp	.+142    	; 0x113c <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <M_DIO_U8_PinRead+0x6c>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <M_DIO_U8_PinRead+0x68>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	35 c0       	rjmp	.+106    	; 0x113c <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    10d2:	e6 e3       	ldi	r30, 0x36	; 54
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <M_DIO_U8_PinRead+0x90>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <M_DIO_U8_PinRead+0x8c>
    10ee:	ca 01       	movw	r24, r20
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	23 c0       	rjmp	.+70     	; 0x113c <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    10f6:	e3 e3       	ldi	r30, 0x33	; 51
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <M_DIO_U8_PinRead+0xb4>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <M_DIO_U8_PinRead+0xb0>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	11 c0       	rjmp	.+34     	; 0x113c <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    111a:	e0 e3       	ldi	r30, 0x30	; 48
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <M_DIO_U8_PinRead+0xd8>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <M_DIO_U8_PinRead+0xd4>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	62 e0       	ldi	r22, 0x02	; 2
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	63 e0       	ldi	r22, 0x03	; 3
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	64 e0       	ldi	r22, 0x04	; 4
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	65 e0       	ldi	r22, 0x05	; 5
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	66 e0       	ldi	r22, 0x06	; 6
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	67 e0       	ldi	r22, 0x07	; 7
    11a0:	41 e0       	ldi	r20, 0x01	; 1
    11a2:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	66 e0       	ldi	r22, 0x06	; 6
    11aa:	41 e0       	ldi	r20, 0x01	; 1
    11ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	67 e0       	ldi	r22, 0x07	; 7
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>


}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	a4 97       	sbiw	r28, 0x24	; 36
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    11d6:	88 a1       	ldd	r24, Y+32	; 0x20
    11d8:	9a e0       	ldi	r25, 0x0A	; 10
    11da:	69 2f       	mov	r22, r25
    11dc:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodqi4>
    11e0:	89 2f       	mov	r24, r25
    11e2:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    11e4:	88 a1       	ldd	r24, Y+32	; 0x20
    11e6:	9a e0       	ldi	r25, 0x0A	; 10
    11e8:	69 2f       	mov	r22, r25
    11ea:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodqi4>
    11ee:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    11f0:	1d 8e       	std	Y+29, r1	; 0x1d
    11f2:	77 c4       	rjmp	.+2286   	; 0x1ae2 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    11f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3c a3       	std	Y+36, r19	; 0x24
    11fc:	2b a3       	std	Y+35, r18	; 0x23
    11fe:	8b a1       	ldd	r24, Y+35	; 0x23
    1200:	9c a1       	ldd	r25, Y+36	; 0x24
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <H_SSD_Void_SsdDisplay+0x4a>
    1208:	d7 c0       	rjmp	.+430    	; 0x13b8 <H_SSD_Void_SsdDisplay+0x1f8>
    120a:	2b a1       	ldd	r18, Y+35	; 0x23
    120c:	3c a1       	ldd	r19, Y+36	; 0x24
    120e:	25 30       	cpi	r18, 0x05	; 5
    1210:	31 05       	cpc	r19, r1
    1212:	ec f4       	brge	.+58     	; 0x124e <H_SSD_Void_SsdDisplay+0x8e>
    1214:	8b a1       	ldd	r24, Y+35	; 0x23
    1216:	9c a1       	ldd	r25, Y+36	; 0x24
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <H_SSD_Void_SsdDisplay+0x60>
    121e:	60 c0       	rjmp	.+192    	; 0x12e0 <H_SSD_Void_SsdDisplay+0x120>
    1220:	2b a1       	ldd	r18, Y+35	; 0x23
    1222:	3c a1       	ldd	r19, Y+36	; 0x24
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <H_SSD_Void_SsdDisplay+0x74>
    122a:	8b a1       	ldd	r24, Y+35	; 0x23
    122c:	9c a1       	ldd	r25, Y+36	; 0x24
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	99 f1       	breq	.+102    	; 0x1298 <H_SSD_Void_SsdDisplay+0xd8>
    1232:	99 c1       	rjmp	.+818    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
    1234:	2b a1       	ldd	r18, Y+35	; 0x23
    1236:	3c a1       	ldd	r19, Y+36	; 0x24
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <H_SSD_Void_SsdDisplay+0x80>
    123e:	74 c0       	rjmp	.+232    	; 0x1328 <H_SSD_Void_SsdDisplay+0x168>
    1240:	8b a1       	ldd	r24, Y+35	; 0x23
    1242:	9c a1       	ldd	r25, Y+36	; 0x24
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <H_SSD_Void_SsdDisplay+0x8c>
    124a:	92 c0       	rjmp	.+292    	; 0x1370 <H_SSD_Void_SsdDisplay+0x1b0>
    124c:	8c c1       	rjmp	.+792    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
    124e:	2b a1       	ldd	r18, Y+35	; 0x23
    1250:	3c a1       	ldd	r19, Y+36	; 0x24
    1252:	27 30       	cpi	r18, 0x07	; 7
    1254:	31 05       	cpc	r19, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <H_SSD_Void_SsdDisplay+0x9a>
    1258:	1b c1       	rjmp	.+566    	; 0x1490 <H_SSD_Void_SsdDisplay+0x2d0>
    125a:	8b a1       	ldd	r24, Y+35	; 0x23
    125c:	9c a1       	ldd	r25, Y+36	; 0x24
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	91 05       	cpc	r25, r1
    1262:	6c f4       	brge	.+26     	; 0x127e <H_SSD_Void_SsdDisplay+0xbe>
    1264:	2b a1       	ldd	r18, Y+35	; 0x23
    1266:	3c a1       	ldd	r19, Y+36	; 0x24
    1268:	25 30       	cpi	r18, 0x05	; 5
    126a:	31 05       	cpc	r19, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <H_SSD_Void_SsdDisplay+0xb0>
    126e:	c8 c0       	rjmp	.+400    	; 0x1400 <H_SSD_Void_SsdDisplay+0x240>
    1270:	8b a1       	ldd	r24, Y+35	; 0x23
    1272:	9c a1       	ldd	r25, Y+36	; 0x24
    1274:	86 30       	cpi	r24, 0x06	; 6
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <H_SSD_Void_SsdDisplay+0xbc>
    127a:	e6 c0       	rjmp	.+460    	; 0x1448 <H_SSD_Void_SsdDisplay+0x288>
    127c:	74 c1       	rjmp	.+744    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
    127e:	2b a1       	ldd	r18, Y+35	; 0x23
    1280:	3c a1       	ldd	r19, Y+36	; 0x24
    1282:	28 30       	cpi	r18, 0x08	; 8
    1284:	31 05       	cpc	r19, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <H_SSD_Void_SsdDisplay+0xca>
    1288:	27 c1       	rjmp	.+590    	; 0x14d8 <H_SSD_Void_SsdDisplay+0x318>
    128a:	8b a1       	ldd	r24, Y+35	; 0x23
    128c:	9c a1       	ldd	r25, Y+36	; 0x24
    128e:	89 30       	cpi	r24, 0x09	; 9
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <H_SSD_Void_SsdDisplay+0xd6>
    1294:	45 c1       	rjmp	.+650    	; 0x1520 <H_SSD_Void_SsdDisplay+0x360>
    1296:	67 c1       	rjmp	.+718    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	63 e0       	ldi	r22, 0x03	; 3
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	64 e0       	ldi	r22, 0x04	; 4
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	66 e0       	ldi	r22, 0x06	; 6
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    12de:	43 c1       	rjmp	.+646    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	64 e0       	ldi	r22, 0x04	; 4
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	65 e0       	ldi	r22, 0x05	; 5
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	66 e0       	ldi	r22, 0x06	; 6
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1326:	1f c1       	rjmp	.+574    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	63 e0       	ldi	r22, 0x03	; 3
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	65 e0       	ldi	r22, 0x05	; 5
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	66 e0       	ldi	r22, 0x06	; 6
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    136e:	fb c0       	rjmp	.+502    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	62 e0       	ldi	r22, 0x02	; 2
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	63 e0       	ldi	r22, 0x03	; 3
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	65 e0       	ldi	r22, 0x05	; 5
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	66 e0       	ldi	r22, 0x06	; 6
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    13b6:	d7 c0       	rjmp	.+430    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	64 e0       	ldi	r22, 0x04	; 4
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	65 e0       	ldi	r22, 0x05	; 5
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	66 e0       	ldi	r22, 0x06	; 6
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    13fe:	b3 c0       	rjmp	.+358    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	62 e0       	ldi	r22, 0x02	; 2
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	63 e0       	ldi	r22, 0x03	; 3
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	65 e0       	ldi	r22, 0x05	; 5
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	66 e0       	ldi	r22, 0x06	; 6
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1446:	8f c0       	rjmp	.+286    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	65 e0       	ldi	r22, 0x05	; 5
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    148e:	6b c0       	rjmp	.+214    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	62 e0       	ldi	r22, 0x02	; 2
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	63 e0       	ldi	r22, 0x03	; 3
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	66 e0       	ldi	r22, 0x06	; 6
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    14d6:	47 c0       	rjmp	.+142    	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	63 e0       	ldi	r22, 0x03	; 3
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	64 e0       	ldi	r22, 0x04	; 4
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	65 e0       	ldi	r22, 0x05	; 5
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	66 e0       	ldi	r22, 0x06	; 6
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    151e:	23 c0       	rjmp	.+70     	; 0x1566 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	63 e0       	ldi	r22, 0x03	; 3
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	64 e0       	ldi	r22, 0x04	; 4
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	65 e0       	ldi	r22, 0x05	; 5
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	66 e0       	ldi	r22, 0x06	; 6
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	66 e0       	ldi	r22, 0x06	; 6
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	67 e0       	ldi	r22, 0x07	; 7
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	89 8f       	std	Y+25, r24	; 0x19
    1584:	9a 8f       	std	Y+26, r25	; 0x1a
    1586:	ab 8f       	std	Y+27, r26	; 0x1b
    1588:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	69 8d       	ldd	r22, Y+25	; 0x19
    158c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a e7       	ldi	r20, 0x7A	; 122
    1598:	53 e4       	ldi	r21, 0x43	; 67
    159a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8d 8b       	std	Y+21, r24	; 0x15
    15a4:	9e 8b       	std	Y+22, r25	; 0x16
    15a6:	af 8b       	std	Y+23, r26	; 0x17
    15a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15aa:	6d 89       	ldd	r22, Y+21	; 0x15
    15ac:	7e 89       	ldd	r23, Y+22	; 0x16
    15ae:	8f 89       	ldd	r24, Y+23	; 0x17
    15b0:	98 8d       	ldd	r25, Y+24	; 0x18
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	69 8d       	ldd	r22, Y+25	; 0x19
    15e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
    160c:	0f c0       	rjmp	.+30     	; 0x162c <H_SSD_Void_SsdDisplay+0x46c>
    160e:	89 e1       	ldi	r24, 0x19	; 25
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9a 8b       	std	Y+18, r25	; 0x12
    1614:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	89 89       	ldd	r24, Y+17	; 0x11
    1618:	9a 89       	ldd	r25, Y+18	; 0x12
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <H_SSD_Void_SsdDisplay+0x45a>
    161e:	9a 8b       	std	Y+18, r25	; 0x12
    1620:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9c 8b       	std	Y+20, r25	; 0x14
    162a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8b 89       	ldd	r24, Y+19	; 0x13
    162e:	9c 89       	ldd	r25, Y+20	; 0x14
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <H_SSD_Void_SsdDisplay+0x44e>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6d 89       	ldd	r22, Y+21	; 0x15
    1638:	7e 89       	ldd	r23, Y+22	; 0x16
    163a:	8f 89       	ldd	r24, Y+23	; 0x17
    163c:	98 8d       	ldd	r25, Y+24	; 0x18
    163e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	8b 89       	ldd	r24, Y+19	; 0x13
    164c:	9c 89       	ldd	r25, Y+20	; 0x14
    164e:	98 8b       	std	Y+16, r25	; 0x10
    1650:	8f 87       	std	Y+15, r24	; 0x0f
    1652:	8f 85       	ldd	r24, Y+15	; 0x0f
    1654:	98 89       	ldd	r25, Y+16	; 0x10
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <H_SSD_Void_SsdDisplay+0x496>
    165a:	98 8b       	std	Y+16, r25	; 0x10
    165c:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	66 e0       	ldi	r22, 0x06	; 6
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    1668:	8e 8d       	ldd	r24, Y+30	; 0x1e
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3a a3       	std	Y+34, r19	; 0x22
    1670:	29 a3       	std	Y+33, r18	; 0x21
    1672:	89 a1       	ldd	r24, Y+33	; 0x21
    1674:	9a a1       	ldd	r25, Y+34	; 0x22
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <H_SSD_Void_SsdDisplay+0x4be>
    167c:	d7 c0       	rjmp	.+430    	; 0x182c <H_SSD_Void_SsdDisplay+0x66c>
    167e:	29 a1       	ldd	r18, Y+33	; 0x21
    1680:	3a a1       	ldd	r19, Y+34	; 0x22
    1682:	25 30       	cpi	r18, 0x05	; 5
    1684:	31 05       	cpc	r19, r1
    1686:	ec f4       	brge	.+58     	; 0x16c2 <H_SSD_Void_SsdDisplay+0x502>
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	9a a1       	ldd	r25, Y+34	; 0x22
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <H_SSD_Void_SsdDisplay+0x4d4>
    1692:	60 c0       	rjmp	.+192    	; 0x1754 <H_SSD_Void_SsdDisplay+0x594>
    1694:	29 a1       	ldd	r18, Y+33	; 0x21
    1696:	3a a1       	ldd	r19, Y+34	; 0x22
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <H_SSD_Void_SsdDisplay+0x4e8>
    169e:	89 a1       	ldd	r24, Y+33	; 0x21
    16a0:	9a a1       	ldd	r25, Y+34	; 0x22
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	99 f1       	breq	.+102    	; 0x170c <H_SSD_Void_SsdDisplay+0x54c>
    16a6:	99 c1       	rjmp	.+818    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
    16a8:	29 a1       	ldd	r18, Y+33	; 0x21
    16aa:	3a a1       	ldd	r19, Y+34	; 0x22
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <H_SSD_Void_SsdDisplay+0x4f4>
    16b2:	74 c0       	rjmp	.+232    	; 0x179c <H_SSD_Void_SsdDisplay+0x5dc>
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	9a a1       	ldd	r25, Y+34	; 0x22
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <H_SSD_Void_SsdDisplay+0x500>
    16be:	92 c0       	rjmp	.+292    	; 0x17e4 <H_SSD_Void_SsdDisplay+0x624>
    16c0:	8c c1       	rjmp	.+792    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
    16c2:	29 a1       	ldd	r18, Y+33	; 0x21
    16c4:	3a a1       	ldd	r19, Y+34	; 0x22
    16c6:	27 30       	cpi	r18, 0x07	; 7
    16c8:	31 05       	cpc	r19, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <H_SSD_Void_SsdDisplay+0x50e>
    16cc:	1b c1       	rjmp	.+566    	; 0x1904 <H_SSD_Void_SsdDisplay+0x744>
    16ce:	89 a1       	ldd	r24, Y+33	; 0x21
    16d0:	9a a1       	ldd	r25, Y+34	; 0x22
    16d2:	88 30       	cpi	r24, 0x08	; 8
    16d4:	91 05       	cpc	r25, r1
    16d6:	6c f4       	brge	.+26     	; 0x16f2 <H_SSD_Void_SsdDisplay+0x532>
    16d8:	29 a1       	ldd	r18, Y+33	; 0x21
    16da:	3a a1       	ldd	r19, Y+34	; 0x22
    16dc:	25 30       	cpi	r18, 0x05	; 5
    16de:	31 05       	cpc	r19, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <H_SSD_Void_SsdDisplay+0x524>
    16e2:	c8 c0       	rjmp	.+400    	; 0x1874 <H_SSD_Void_SsdDisplay+0x6b4>
    16e4:	89 a1       	ldd	r24, Y+33	; 0x21
    16e6:	9a a1       	ldd	r25, Y+34	; 0x22
    16e8:	86 30       	cpi	r24, 0x06	; 6
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <H_SSD_Void_SsdDisplay+0x530>
    16ee:	e6 c0       	rjmp	.+460    	; 0x18bc <H_SSD_Void_SsdDisplay+0x6fc>
    16f0:	74 c1       	rjmp	.+744    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
    16f2:	29 a1       	ldd	r18, Y+33	; 0x21
    16f4:	3a a1       	ldd	r19, Y+34	; 0x22
    16f6:	28 30       	cpi	r18, 0x08	; 8
    16f8:	31 05       	cpc	r19, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <H_SSD_Void_SsdDisplay+0x53e>
    16fc:	27 c1       	rjmp	.+590    	; 0x194c <H_SSD_Void_SsdDisplay+0x78c>
    16fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1700:	9a a1       	ldd	r25, Y+34	; 0x22
    1702:	89 30       	cpi	r24, 0x09	; 9
    1704:	91 05       	cpc	r25, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <H_SSD_Void_SsdDisplay+0x54a>
    1708:	45 c1       	rjmp	.+650    	; 0x1994 <H_SSD_Void_SsdDisplay+0x7d4>
    170a:	67 c1       	rjmp	.+718    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	64 e0       	ldi	r22, 0x04	; 4
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	65 e0       	ldi	r22, 0x05	; 5
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	66 e0       	ldi	r22, 0x06	; 6
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1752:	43 c1       	rjmp	.+646    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	62 e0       	ldi	r22, 0x02	; 2
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	64 e0       	ldi	r22, 0x04	; 4
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	65 e0       	ldi	r22, 0x05	; 5
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	66 e0       	ldi	r22, 0x06	; 6
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    179a:	1f c1       	rjmp	.+574    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	64 e0       	ldi	r22, 0x04	; 4
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	65 e0       	ldi	r22, 0x05	; 5
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	66 e0       	ldi	r22, 0x06	; 6
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    17e2:	fb c0       	rjmp	.+502    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	66 e0       	ldi	r22, 0x06	; 6
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    182a:	d7 c0       	rjmp	.+430    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	63 e0       	ldi	r22, 0x03	; 3
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	65 e0       	ldi	r22, 0x05	; 5
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	66 e0       	ldi	r22, 0x06	; 6
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1872:	b3 c0       	rjmp	.+358    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	63 e0       	ldi	r22, 0x03	; 3
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	64 e0       	ldi	r22, 0x04	; 4
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	65 e0       	ldi	r22, 0x05	; 5
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	66 e0       	ldi	r22, 0x06	; 6
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    18ba:	8f c0       	rjmp	.+286    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	63 e0       	ldi	r22, 0x03	; 3
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	64 e0       	ldi	r22, 0x04	; 4
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	65 e0       	ldi	r22, 0x05	; 5
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	66 e0       	ldi	r22, 0x06	; 6
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1902:	6b c0       	rjmp	.+214    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	63 e0       	ldi	r22, 0x03	; 3
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	64 e0       	ldi	r22, 0x04	; 4
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	65 e0       	ldi	r22, 0x05	; 5
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	66 e0       	ldi	r22, 0x06	; 6
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    194a:	47 c0       	rjmp	.+142    	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	64 e0       	ldi	r22, 0x04	; 4
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	65 e0       	ldi	r22, 0x05	; 5
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	66 e0       	ldi	r22, 0x06	; 6
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    1992:	23 c0       	rjmp	.+70     	; 0x19da <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	63 e0       	ldi	r22, 0x03	; 3
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	65 e0       	ldi	r22, 0x05	; 5
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	66 e0       	ldi	r22, 0x06	; 6
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	67 e0       	ldi	r22, 0x07	; 7
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e8       	ldi	r26, 0x80	; 128
    19f4:	bf e3       	ldi	r27, 0x3F	; 63
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	9c 87       	std	Y+12, r25	; 0x0c
    19fa:	ad 87       	std	Y+13, r26	; 0x0d
    19fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	53 e4       	ldi	r21, 0x43	; 67
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f 83       	std	Y+7, r24	; 0x07
    1a18:	98 87       	std	Y+8, r25	; 0x08
    1a1a:	a9 87       	std	Y+9, r26	; 0x09
    1a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <H_SSD_Void_SsdDisplay+0x8e0>
    1a82:	89 e1       	ldi	r24, 0x19	; 25
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <H_SSD_Void_SsdDisplay+0x8ce>
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <H_SSD_Void_SsdDisplay+0x8c2>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <H_SSD_Void_SsdDisplay+0x90a>
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	67 e0       	ldi	r22, 0x07	; 7
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae4:	88 3c       	cpi	r24, 0xC8	; 200
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <H_SSD_Void_SsdDisplay+0x92a>
    1ae8:	85 cb       	rjmp	.-2294   	; 0x11f4 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    1aea:	a4 96       	adiw	r28, 0x24	; 36
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <H_SSD_Void_SsdDisplayCountDown+0x6>
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    1b08:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	88 23       	and	r24, r24
    1b20:	bc f7       	brge	.-18     	; 0x1b10 <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <H_PushButton_void_PushButtonInt+0x6>
    1b32:	0f 92       	push	r0
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	3b 83       	std	Y+3, r19	; 0x03
    1b42:	2a 83       	std	Y+2, r18	; 0x02
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	e1 f0       	breq	.+56     	; 0x1b86 <H_PushButton_void_PushButtonInt+0x5a>
    1b4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b50:	3b 81       	ldd	r19, Y+3	; 0x03
    1b52:	23 30       	cpi	r18, 0x03	; 3
    1b54:	31 05       	cpc	r19, r1
    1b56:	34 f4       	brge	.+12     	; 0x1b64 <H_PushButton_void_PushButtonInt+0x38>
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <H_PushButton_void_PushButtonInt+0x4e>
    1b62:	22 c0       	rjmp	.+68     	; 0x1ba8 <H_PushButton_void_PushButtonInt+0x7c>
    1b64:	2a 81       	ldd	r18, Y+2	; 0x02
    1b66:	3b 81       	ldd	r19, Y+3	; 0x03
    1b68:	23 30       	cpi	r18, 0x03	; 3
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	91 f0       	breq	.+36     	; 0x1b92 <H_PushButton_void_PushButtonInt+0x66>
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	91 05       	cpc	r25, r1
    1b76:	99 f0       	breq	.+38     	; 0x1b9e <H_PushButton_void_PushButtonInt+0x72>
    1b78:	17 c0       	rjmp	.+46     	; 0x1ba8 <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    1b84:	11 c0       	rjmp	.+34     	; 0x1ba8 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    1b86:	84 e0       	ldi	r24, 0x04	; 4
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    1b90:	0b c0       	rjmp	.+22     	; 0x1ba8 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	64 e0       	ldi	r22, 0x04	; 4
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	65 e0       	ldi	r22, 0x05	; 5
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	ec 97       	sbiw	r28, 0x3c	; 60
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    1bca:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    1bcc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3c af       	std	Y+60, r19	; 0x3c
    1bd4:	2b af       	std	Y+59, r18	; 0x3b
    1bd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <H_PushButton_u8_PushButtonRead+0x2e>
    1be0:	a2 c0       	rjmp	.+324    	; 0x1d26 <H_PushButton_u8_PushButtonRead+0x172>
    1be2:	2b ad       	ldd	r18, Y+59	; 0x3b
    1be4:	3c ad       	ldd	r19, Y+60	; 0x3c
    1be6:	23 30       	cpi	r18, 0x03	; 3
    1be8:	31 05       	cpc	r19, r1
    1bea:	34 f4       	brge	.+12     	; 0x1bf8 <H_PushButton_u8_PushButtonRead+0x44>
    1bec:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bee:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <H_PushButton_u8_PushButtonRead+0x5e>
    1bf6:	33 c2       	rjmp	.+1126   	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
    1bf8:	2b ad       	ldd	r18, Y+59	; 0x3b
    1bfa:	3c ad       	ldd	r19, Y+60	; 0x3c
    1bfc:	23 30       	cpi	r18, 0x03	; 3
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <H_PushButton_u8_PushButtonRead+0x50>
    1c02:	1b c1       	rjmp	.+566    	; 0x1e3a <H_PushButton_u8_PushButtonRead+0x286>
    1c04:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c06:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <H_PushButton_u8_PushButtonRead+0x5c>
    1c0e:	9f c1       	rjmp	.+830    	; 0x1f4e <H_PushButton_u8_PushButtonRead+0x39a>
    1c10:	26 c2       	rjmp	.+1100   	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    1c12:	84 e0       	ldi	r24, 0x04	; 4
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1c1a:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    1c1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <H_PushButton_u8_PushButtonRead+0x70>
    1c22:	1d c2       	rjmp	.+1082   	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a0 e7       	ldi	r26, 0x70	; 112
    1c2a:	b2 e4       	ldi	r27, 0x42	; 66
    1c2c:	8d ab       	std	Y+53, r24	; 0x35
    1c2e:	9e ab       	std	Y+54, r25	; 0x36
    1c30:	af ab       	std	Y+55, r26	; 0x37
    1c32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6d a9       	ldd	r22, Y+53	; 0x35
    1c36:	7e a9       	ldd	r23, Y+54	; 0x36
    1c38:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	53 e4       	ldi	r21, 0x43	; 67
    1c44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	89 ab       	std	Y+49, r24	; 0x31
    1c4e:	9a ab       	std	Y+50, r25	; 0x32
    1c50:	ab ab       	std	Y+51, r26	; 0x33
    1c52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c54:	69 a9       	ldd	r22, Y+49	; 0x31
    1c56:	7a a9       	ldd	r23, Y+50	; 0x32
    1c58:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	98 ab       	std	Y+48, r25	; 0x30
    1c72:	8f a7       	std	Y+47, r24	; 0x2f
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    1c76:	69 a9       	ldd	r22, Y+49	; 0x31
    1c78:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c90:	7e a9       	ldd	r23, Y+54	; 0x36
    1c92:	8f a9       	ldd	r24, Y+55	; 0x37
    1c94:	98 ad       	ldd	r25, Y+56	; 0x38
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <H_PushButton_u8_PushButtonRead+0x122>
    1cb8:	89 e1       	ldi	r24, 0x19	; 25
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9e a7       	std	Y+46, r25	; 0x2e
    1cbe:	8d a7       	std	Y+45, r24	; 0x2d
    1cc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <H_PushButton_u8_PushButtonRead+0x110>
    1cc8:	9e a7       	std	Y+46, r25	; 0x2e
    1cca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cce:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	98 ab       	std	Y+48, r25	; 0x30
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <H_PushButton_u8_PushButtonRead+0x104>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	98 ab       	std	Y+48, r25	; 0x30
    1cf2:	8f a7       	std	Y+47, r24	; 0x2f
    1cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf8:	9c a7       	std	Y+44, r25	; 0x2c
    1cfa:	8b a7       	std	Y+43, r24	; 0x2b
    1cfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <H_PushButton_u8_PushButtonRead+0x14c>
    1d04:	9c a7       	std	Y+44, r25	; 0x2c
    1d06:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1d10:	88 23       	and	r24, r24
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <H_PushButton_u8_PushButtonRead+0x162>
    1d14:	a4 c1       	rjmp	.+840    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    1d16:	84 e0       	ldi	r24, 0x04	; 4
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1d1e:	88 23       	and	r24, r24
    1d20:	d1 f3       	breq	.-12     	; 0x1d16 <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    1d22:	19 ae       	std	Y+57, r1	; 0x39
    1d24:	9c c1       	rjmp	.+824    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    1d26:	84 e0       	ldi	r24, 0x04	; 4
    1d28:	63 e0       	ldi	r22, 0x03	; 3
    1d2a:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1d2e:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    1d30:	89 ad       	ldd	r24, Y+57	; 0x39
    1d32:	88 23       	and	r24, r24
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <H_PushButton_u8_PushButtonRead+0x184>
    1d36:	93 c1       	rjmp	.+806    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e7       	ldi	r26, 0x70	; 112
    1d3e:	b2 e4       	ldi	r27, 0x42	; 66
    1d40:	8f a3       	std	Y+39, r24	; 0x27
    1d42:	98 a7       	std	Y+40, r25	; 0x28
    1d44:	a9 a7       	std	Y+41, r26	; 0x29
    1d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	53 e4       	ldi	r21, 0x43	; 67
    1d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8b a3       	std	Y+35, r24	; 0x23
    1d62:	9c a3       	std	Y+36, r25	; 0x24
    1d64:	ad a3       	std	Y+37, r26	; 0x25
    1d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d68:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9a a3       	std	Y+34, r25	; 0x22
    1d86:	89 a3       	std	Y+33, r24	; 0x21
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    1d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d90:	9e a1       	ldd	r25, Y+38	; 0x26
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <H_PushButton_u8_PushButtonRead+0x236>
    1dcc:	89 e1       	ldi	r24, 0x19	; 25
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	98 a3       	std	Y+32, r25	; 0x20
    1dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <H_PushButton_u8_PushButtonRead+0x224>
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9a a3       	std	Y+34, r25	; 0x22
    1de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	89 a1       	ldd	r24, Y+33	; 0x21
    1dec:	9a a1       	ldd	r25, Y+34	; 0x22
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <H_PushButton_u8_PushButtonRead+0x218>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6b a1       	ldd	r22, Y+35	; 0x23
    1df6:	7c a1       	ldd	r23, Y+36	; 0x24
    1df8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <H_PushButton_u8_PushButtonRead+0x260>
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	63 e0       	ldi	r22, 0x03	; 3
    1e20:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1e24:	88 23       	and	r24, r24
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <H_PushButton_u8_PushButtonRead+0x276>
    1e28:	1a c1       	rjmp	.+564    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	63 e0       	ldi	r22, 0x03	; 3
    1e2e:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1e32:	88 23       	and	r24, r24
    1e34:	d1 f3       	breq	.-12     	; 0x1e2a <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    1e36:	19 ae       	std	Y+57, r1	; 0x39
    1e38:	12 c1       	rjmp	.+548    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    1e3a:	84 e0       	ldi	r24, 0x04	; 4
    1e3c:	64 e0       	ldi	r22, 0x04	; 4
    1e3e:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1e42:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    1e44:	89 ad       	ldd	r24, Y+57	; 0x39
    1e46:	88 23       	and	r24, r24
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <H_PushButton_u8_PushButtonRead+0x298>
    1e4a:	09 c1       	rjmp	.+530    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e7       	ldi	r26, 0x70	; 112
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	89 8f       	std	Y+25, r24	; 0x19
    1e56:	9a 8f       	std	Y+26, r25	; 0x1a
    1e58:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	53 e4       	ldi	r21, 0x43	; 67
    1e6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    1e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <H_PushButton_u8_PushButtonRead+0x34a>
    1ee0:	89 e1       	ldi	r24, 0x19	; 25
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <H_PushButton_u8_PushButtonRead+0x338>
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <H_PushButton_u8_PushButtonRead+0x32c>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	98 89       	ldd	r25, Y+16	; 0x10
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <H_PushButton_u8_PushButtonRead+0x374>
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    1f30:	84 e0       	ldi	r24, 0x04	; 4
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <H_PushButton_u8_PushButtonRead+0x38a>
    1f3c:	90 c0       	rjmp	.+288    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	64 e0       	ldi	r22, 0x04	; 4
    1f42:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1f46:	88 23       	and	r24, r24
    1f48:	d1 f3       	breq	.-12     	; 0x1f3e <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    1f4a:	19 ae       	std	Y+57, r1	; 0x39
    1f4c:	88 c0       	rjmp	.+272    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    1f56:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    1f58:	89 ad       	ldd	r24, Y+57	; 0x39
    1f5a:	88 23       	and	r24, r24
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <H_PushButton_u8_PushButtonRead+0x3ac>
    1f5e:	7f c0       	rjmp	.+254    	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e7       	ldi	r26, 0x70	; 112
    1f66:	b2 e4       	ldi	r27, 0x42	; 66
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
    1f6a:	9c 87       	std	Y+12, r25	; 0x0c
    1f6c:	ad 87       	std	Y+13, r26	; 0x0d
    1f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	53 e4       	ldi	r21, 0x43	; 67
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	98 87       	std	Y+8, r25	; 0x08
    1f8c:	a9 87       	std	Y+9, r26	; 0x09
    1f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <H_PushButton_u8_PushButtonRead+0x45e>
    1ff4:	89 e1       	ldi	r24, 0x19	; 25
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <H_PushButton_u8_PushButtonRead+0x44c>
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <H_PushButton_u8_PushButtonRead+0x440>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <H_PushButton_u8_PushButtonRead+0x488>
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	65 e0       	ldi	r22, 0x05	; 5
    2048:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    204c:	88 23       	and	r24, r24
    204e:	39 f4       	brne	.+14     	; 0x205e <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    2050:	84 e0       	ldi	r24, 0x04	; 4
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	0e 94 2d 08 	call	0x105a	; 0x105a <M_DIO_U8_PinRead>
    2058:	88 23       	and	r24, r24
    205a:	d1 f3       	breq	.-12     	; 0x2050 <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    205c:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    205e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2060:	ec 96       	adiw	r28, 0x3c	; 60
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <H_LED_Void_LedInit+0x6>
    2078:	0f 92       	push	r0
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3b 83       	std	Y+3, r19	; 0x03
    2088:	2a 83       	std	Y+2, r18	; 0x02
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	91 05       	cpc	r25, r1
    2092:	11 f1       	breq	.+68     	; 0x20d8 <H_LED_Void_LedInit+0x66>
    2094:	2a 81       	ldd	r18, Y+2	; 0x02
    2096:	3b 81       	ldd	r19, Y+3	; 0x03
    2098:	23 30       	cpi	r18, 0x03	; 3
    209a:	31 05       	cpc	r19, r1
    209c:	34 f4       	brge	.+12     	; 0x20aa <H_LED_Void_LedInit+0x38>
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <H_LED_Void_LedInit+0x4e>
    20a8:	22 c0       	rjmp	.+68     	; 0x20ee <H_LED_Void_LedInit+0x7c>
    20aa:	2a 81       	ldd	r18, Y+2	; 0x02
    20ac:	3b 81       	ldd	r19, Y+3	; 0x03
    20ae:	23 30       	cpi	r18, 0x03	; 3
    20b0:	31 05       	cpc	r19, r1
    20b2:	61 f0       	breq	.+24     	; 0x20cc <H_LED_Void_LedInit+0x5a>
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	91 05       	cpc	r25, r1
    20bc:	99 f0       	breq	.+38     	; 0x20e4 <H_LED_Void_LedInit+0x72>
    20be:	17 c0       	rjmp	.+46     	; 0x20ee <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    20ca:	11 c0       	rjmp	.+34     	; 0x20ee <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    20d6:	0b c0       	rjmp	.+22     	; 0x20ee <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	63 e0       	ldi	r22, 0x03	; 3
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <H_LED_Void_LedOn+0x6>
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	3b 83       	std	Y+3, r19	; 0x03
    2110:	2a 83       	std	Y+2, r18	; 0x02
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	91 05       	cpc	r25, r1
    211a:	11 f1       	breq	.+68     	; 0x2160 <H_LED_Void_LedOn+0x66>
    211c:	2a 81       	ldd	r18, Y+2	; 0x02
    211e:	3b 81       	ldd	r19, Y+3	; 0x03
    2120:	23 30       	cpi	r18, 0x03	; 3
    2122:	31 05       	cpc	r19, r1
    2124:	34 f4       	brge	.+12     	; 0x2132 <H_LED_Void_LedOn+0x38>
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	61 f0       	breq	.+24     	; 0x2148 <H_LED_Void_LedOn+0x4e>
    2130:	22 c0       	rjmp	.+68     	; 0x2176 <H_LED_Void_LedOn+0x7c>
    2132:	2a 81       	ldd	r18, Y+2	; 0x02
    2134:	3b 81       	ldd	r19, Y+3	; 0x03
    2136:	23 30       	cpi	r18, 0x03	; 3
    2138:	31 05       	cpc	r19, r1
    213a:	61 f0       	breq	.+24     	; 0x2154 <H_LED_Void_LedOn+0x5a>
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	9b 81       	ldd	r25, Y+3	; 0x03
    2140:	84 30       	cpi	r24, 0x04	; 4
    2142:	91 05       	cpc	r25, r1
    2144:	99 f0       	breq	.+38     	; 0x216c <H_LED_Void_LedOn+0x72>
    2146:	17 c0       	rjmp	.+46     	; 0x2176 <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2152:	11 c0       	rjmp	.+34     	; 0x2176 <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    215e:	0b c0       	rjmp	.+22     	; 0x2176 <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	63 e0       	ldi	r22, 0x03	; 3
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <H_LED_Void_LedOff+0x6>
    2188:	0f 92       	push	r0
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	3b 83       	std	Y+3, r19	; 0x03
    2198:	2a 83       	std	Y+2, r18	; 0x02
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	91 05       	cpc	r25, r1
    21a2:	b1 f0       	breq	.+44     	; 0x21d0 <H_LED_Void_LedOff+0x4e>
    21a4:	2a 81       	ldd	r18, Y+2	; 0x02
    21a6:	3b 81       	ldd	r19, Y+3	; 0x03
    21a8:	23 30       	cpi	r18, 0x03	; 3
    21aa:	31 05       	cpc	r19, r1
    21ac:	34 f4       	brge	.+12     	; 0x21ba <H_LED_Void_LedOff+0x38>
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	91 f0       	breq	.+36     	; 0x21dc <H_LED_Void_LedOff+0x5a>
    21b8:	22 c0       	rjmp	.+68     	; 0x21fe <H_LED_Void_LedOff+0x7c>
    21ba:	2a 81       	ldd	r18, Y+2	; 0x02
    21bc:	3b 81       	ldd	r19, Y+3	; 0x03
    21be:	23 30       	cpi	r18, 0x03	; 3
    21c0:	31 05       	cpc	r19, r1
    21c2:	91 f0       	breq	.+36     	; 0x21e8 <H_LED_Void_LedOff+0x66>
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	84 30       	cpi	r24, 0x04	; 4
    21ca:	91 05       	cpc	r25, r1
    21cc:	99 f0       	breq	.+38     	; 0x21f4 <H_LED_Void_LedOff+0x72>
    21ce:	17 c0       	rjmp	.+46     	; 0x21fe <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    21da:	11 c0       	rjmp	.+34     	; 0x21fe <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    21e6:	0b c0       	rjmp	.+22     	; 0x21fe <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	63 e0       	ldi	r22, 0x03	; 3
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <H_LED_Void_LedTogg+0x6>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	3b 83       	std	Y+3, r19	; 0x03
    2220:	2a 83       	std	Y+2, r18	; 0x02
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	91 05       	cpc	r25, r1
    222a:	b1 f0       	breq	.+44     	; 0x2258 <H_LED_Void_LedTogg+0x4e>
    222c:	2a 81       	ldd	r18, Y+2	; 0x02
    222e:	3b 81       	ldd	r19, Y+3	; 0x03
    2230:	23 30       	cpi	r18, 0x03	; 3
    2232:	31 05       	cpc	r19, r1
    2234:	34 f4       	brge	.+12     	; 0x2242 <H_LED_Void_LedTogg+0x38>
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	9b 81       	ldd	r25, Y+3	; 0x03
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	91 05       	cpc	r25, r1
    223e:	89 f0       	breq	.+34     	; 0x2262 <H_LED_Void_LedTogg+0x58>
    2240:	1e c0       	rjmp	.+60     	; 0x227e <H_LED_Void_LedTogg+0x74>
    2242:	2a 81       	ldd	r18, Y+2	; 0x02
    2244:	3b 81       	ldd	r19, Y+3	; 0x03
    2246:	23 30       	cpi	r18, 0x03	; 3
    2248:	31 05       	cpc	r19, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <H_LED_Void_LedTogg+0x62>
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	91 05       	cpc	r25, r1
    2254:	81 f0       	breq	.+32     	; 0x2276 <H_LED_Void_LedTogg+0x6c>
    2256:	13 c0       	rjmp	.+38     	; 0x227e <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	62 e0       	ldi	r22, 0x02	; 2
    225c:	0e 94 af 07 	call	0xf5e	; 0xf5e <M_DIO_void_PinTog>
    2260:	0e c0       	rjmp	.+28     	; 0x227e <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 af 07 	call	0xf5e	; 0xf5e <M_DIO_void_PinTog>
    226a:	09 c0       	rjmp	.+18     	; 0x227e <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	0e 94 af 07 	call	0xf5e	; 0xf5e <M_DIO_void_PinTog>
    2274:	04 c0       	rjmp	.+8      	; 0x227e <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	63 e0       	ldi	r22, 0x03	; 3
    227a:	0e 94 af 07 	call	0xf5e	; 0xf5e <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	eb 97       	sbiw	r28, 0x3b	; 59
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    22a0:	89 ad       	ldd	r24, Y+57	; 0x39
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	3b af       	std	Y+59, r19	; 0x3b
    22a8:	2a af       	std	Y+58, r18	; 0x3a
    22aa:	8a ad       	ldd	r24, Y+58	; 0x3a
    22ac:	9b ad       	ldd	r25, Y+59	; 0x3b
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	91 05       	cpc	r25, r1
    22b2:	c9 f0       	breq	.+50     	; 0x22e6 <H_LED_Void_LedBlink+0x5c>
    22b4:	2a ad       	ldd	r18, Y+58	; 0x3a
    22b6:	3b ad       	ldd	r19, Y+59	; 0x3b
    22b8:	23 30       	cpi	r18, 0x03	; 3
    22ba:	31 05       	cpc	r19, r1
    22bc:	3c f4       	brge	.+14     	; 0x22cc <H_LED_Void_LedBlink+0x42>
    22be:	8a ad       	ldd	r24, Y+58	; 0x3a
    22c0:	9b ad       	ldd	r25, Y+59	; 0x3b
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	91 05       	cpc	r25, r1
    22c6:	09 f4       	brne	.+2      	; 0x22ca <H_LED_Void_LedBlink+0x40>
    22c8:	8b c0       	rjmp	.+278    	; 0x23e0 <H_LED_Void_LedBlink+0x156>
    22ca:	00 c2       	rjmp	.+1024   	; 0x26cc <H_LED_Void_LedBlink+0x442>
    22cc:	2a ad       	ldd	r18, Y+58	; 0x3a
    22ce:	3b ad       	ldd	r19, Y+59	; 0x3b
    22d0:	23 30       	cpi	r18, 0x03	; 3
    22d2:	31 05       	cpc	r19, r1
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <H_LED_Void_LedBlink+0x4e>
    22d6:	01 c1       	rjmp	.+514    	; 0x24da <H_LED_Void_LedBlink+0x250>
    22d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    22da:	9b ad       	ldd	r25, Y+59	; 0x3b
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	91 05       	cpc	r25, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <H_LED_Void_LedBlink+0x5a>
    22e2:	78 c1       	rjmp	.+752    	; 0x25d4 <H_LED_Void_LedBlink+0x34a>
    22e4:	f3 c1       	rjmp	.+998    	; 0x26cc <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e5       	ldi	r25, 0x50	; 80
    22f4:	a3 ec       	ldi	r26, 0xC3	; 195
    22f6:	b7 e4       	ldi	r27, 0x47	; 71
    22f8:	8d ab       	std	Y+53, r24	; 0x35
    22fa:	9e ab       	std	Y+54, r25	; 0x36
    22fc:	af ab       	std	Y+55, r26	; 0x37
    22fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6d a9       	ldd	r22, Y+53	; 0x35
    2302:	7e a9       	ldd	r23, Y+54	; 0x36
    2304:	8f a9       	ldd	r24, Y+55	; 0x37
    2306:	98 ad       	ldd	r25, Y+56	; 0x38
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a e7       	ldi	r20, 0x7A	; 122
    230e:	53 e4       	ldi	r21, 0x43	; 67
    2310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	89 ab       	std	Y+49, r24	; 0x31
    231a:	9a ab       	std	Y+50, r25	; 0x32
    231c:	ab ab       	std	Y+51, r26	; 0x33
    231e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2320:	69 a9       	ldd	r22, Y+49	; 0x31
    2322:	7a a9       	ldd	r23, Y+50	; 0x32
    2324:	8b a9       	ldd	r24, Y+51	; 0x33
    2326:	9c a9       	ldd	r25, Y+52	; 0x34
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	98 ab       	std	Y+48, r25	; 0x30
    233e:	8f a7       	std	Y+47, r24	; 0x2f
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2342:	69 a9       	ldd	r22, Y+49	; 0x31
    2344:	7a a9       	ldd	r23, Y+50	; 0x32
    2346:	8b a9       	ldd	r24, Y+51	; 0x33
    2348:	9c a9       	ldd	r25, Y+52	; 0x34
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6d a9       	ldd	r22, Y+53	; 0x35
    235c:	7e a9       	ldd	r23, Y+54	; 0x36
    235e:	8f a9       	ldd	r24, Y+55	; 0x37
    2360:	98 ad       	ldd	r25, Y+56	; 0x38
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	98 ab       	std	Y+48, r25	; 0x30
    2380:	8f a7       	std	Y+47, r24	; 0x2f
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <H_LED_Void_LedBlink+0x118>
    2384:	89 e1       	ldi	r24, 0x19	; 25
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9e a7       	std	Y+46, r25	; 0x2e
    238a:	8d a7       	std	Y+45, r24	; 0x2d
    238c:	8d a5       	ldd	r24, Y+45	; 0x2d
    238e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <H_LED_Void_LedBlink+0x106>
    2394:	9e a7       	std	Y+46, r25	; 0x2e
    2396:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8f a5       	ldd	r24, Y+47	; 0x2f
    239a:	98 a9       	ldd	r25, Y+48	; 0x30
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	98 ab       	std	Y+48, r25	; 0x30
    23a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a4:	98 a9       	ldd	r25, Y+48	; 0x30
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <H_LED_Void_LedBlink+0xfa>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	69 a9       	ldd	r22, Y+49	; 0x31
    23ae:	7a a9       	ldd	r23, Y+50	; 0x32
    23b0:	8b a9       	ldd	r24, Y+51	; 0x33
    23b2:	9c a9       	ldd	r25, Y+52	; 0x34
    23b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	98 ab       	std	Y+48, r25	; 0x30
    23be:	8f a7       	std	Y+47, r24	; 0x2f
    23c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c2:	98 a9       	ldd	r25, Y+48	; 0x30
    23c4:	9c a7       	std	Y+44, r25	; 0x2c
    23c6:	8b a7       	std	Y+43, r24	; 0x2b
    23c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <H_LED_Void_LedBlink+0x142>
    23d0:	9c a7       	std	Y+44, r25	; 0x2c
    23d2:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    23de:	76 c1       	rjmp	.+748    	; 0x26cc <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e5       	ldi	r25, 0x50	; 80
    23ee:	a3 ec       	ldi	r26, 0xC3	; 195
    23f0:	b7 e4       	ldi	r27, 0x47	; 71
    23f2:	8f a3       	std	Y+39, r24	; 0x27
    23f4:	98 a7       	std	Y+40, r25	; 0x28
    23f6:	a9 a7       	std	Y+41, r26	; 0x29
    23f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6f a1       	ldd	r22, Y+39	; 0x27
    23fc:	78 a5       	ldd	r23, Y+40	; 0x28
    23fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2400:	9a a5       	ldd	r25, Y+42	; 0x2a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a e7       	ldi	r20, 0x7A	; 122
    2408:	53 e4       	ldi	r21, 0x43	; 67
    240a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8b a3       	std	Y+35, r24	; 0x23
    2414:	9c a3       	std	Y+36, r25	; 0x24
    2416:	ad a3       	std	Y+37, r26	; 0x25
    2418:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    241a:	6b a1       	ldd	r22, Y+35	; 0x23
    241c:	7c a1       	ldd	r23, Y+36	; 0x24
    241e:	8d a1       	ldd	r24, Y+37	; 0x25
    2420:	9e a1       	ldd	r25, Y+38	; 0x26
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    243c:	6b a1       	ldd	r22, Y+35	; 0x23
    243e:	7c a1       	ldd	r23, Y+36	; 0x24
    2440:	8d a1       	ldd	r24, Y+37	; 0x25
    2442:	9e a1       	ldd	r25, Y+38	; 0x26
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6f a1       	ldd	r22, Y+39	; 0x27
    2456:	78 a5       	ldd	r23, Y+40	; 0x28
    2458:	89 a5       	ldd	r24, Y+41	; 0x29
    245a:	9a a5       	ldd	r25, Y+42	; 0x2a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9a a3       	std	Y+34, r25	; 0x22
    247a:	89 a3       	std	Y+33, r24	; 0x21
    247c:	0f c0       	rjmp	.+30     	; 0x249c <H_LED_Void_LedBlink+0x212>
    247e:	89 e1       	ldi	r24, 0x19	; 25
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	98 a3       	std	Y+32, r25	; 0x20
    2484:	8f 8f       	std	Y+31, r24	; 0x1f
    2486:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2488:	98 a1       	ldd	r25, Y+32	; 0x20
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <H_LED_Void_LedBlink+0x200>
    248e:	98 a3       	std	Y+32, r25	; 0x20
    2490:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	89 a1       	ldd	r24, Y+33	; 0x21
    2494:	9a a1       	ldd	r25, Y+34	; 0x22
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	89 a1       	ldd	r24, Y+33	; 0x21
    249e:	9a a1       	ldd	r25, Y+34	; 0x22
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <H_LED_Void_LedBlink+0x1f4>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6b a1       	ldd	r22, Y+35	; 0x23
    24a8:	7c a1       	ldd	r23, Y+36	; 0x24
    24aa:	8d a1       	ldd	r24, Y+37	; 0x25
    24ac:	9e a1       	ldd	r25, Y+38	; 0x26
    24ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
    24ba:	89 a1       	ldd	r24, Y+33	; 0x21
    24bc:	9a a1       	ldd	r25, Y+34	; 0x22
    24be:	9e 8f       	std	Y+30, r25	; 0x1e
    24c0:	8d 8f       	std	Y+29, r24	; 0x1d
    24c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <H_LED_Void_LedBlink+0x23c>
    24ca:	9e 8f       	std	Y+30, r25	; 0x1e
    24cc:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    24d8:	f9 c0       	rjmp	.+498    	; 0x26cc <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e5       	ldi	r25, 0x50	; 80
    24e8:	a3 ec       	ldi	r26, 0xC3	; 195
    24ea:	b7 e4       	ldi	r27, 0x47	; 71
    24ec:	89 8f       	std	Y+25, r24	; 0x19
    24ee:	9a 8f       	std	Y+26, r25	; 0x1a
    24f0:	ab 8f       	std	Y+27, r26	; 0x1b
    24f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	69 8d       	ldd	r22, Y+25	; 0x19
    24f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	53 e4       	ldi	r21, 0x43	; 67
    2504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8d 8b       	std	Y+21, r24	; 0x15
    250e:	9e 8b       	std	Y+22, r25	; 0x16
    2510:	af 8b       	std	Y+23, r26	; 0x17
    2512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    2536:	6d 89       	ldd	r22, Y+21	; 0x15
    2538:	7e 89       	ldd	r23, Y+22	; 0x16
    253a:	8f 89       	ldd	r24, Y+23	; 0x17
    253c:	98 8d       	ldd	r25, Y+24	; 0x18
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	69 8d       	ldd	r22, Y+25	; 0x19
    2550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <H_LED_Void_LedBlink+0x30c>
    2578:	89 e1       	ldi	r24, 0x19	; 25
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <H_LED_Void_LedBlink+0x2fa>
    2588:	9a 8b       	std	Y+18, r25	; 0x12
    258a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8b 89       	ldd	r24, Y+19	; 0x13
    2598:	9c 89       	ldd	r25, Y+20	; 0x14
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <H_LED_Void_LedBlink+0x2ee>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6d 89       	ldd	r22, Y+21	; 0x15
    25a2:	7e 89       	ldd	r23, Y+22	; 0x16
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	9c 89       	ldd	r25, Y+20	; 0x14
    25b8:	98 8b       	std	Y+16, r25	; 0x10
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	98 89       	ldd	r25, Y+16	; 0x10
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <H_LED_Void_LedBlink+0x336>
    25c4:	98 8b       	std	Y+16, r25	; 0x10
    25c6:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    25d2:	7c c0       	rjmp	.+248    	; 0x26cc <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	63 e0       	ldi	r22, 0x03	; 3
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e5       	ldi	r25, 0x50	; 80
    25e2:	a3 ec       	ldi	r26, 0xC3	; 195
    25e4:	b7 e4       	ldi	r27, 0x47	; 71
    25e6:	8b 87       	std	Y+11, r24	; 0x0b
    25e8:	9c 87       	std	Y+12, r25	; 0x0c
    25ea:	ad 87       	std	Y+13, r26	; 0x0d
    25ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a e7       	ldi	r20, 0x7A	; 122
    25fc:	53 e4       	ldi	r21, 0x43	; 67
    25fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8f 83       	std	Y+7, r24	; 0x07
    2608:	98 87       	std	Y+8, r25	; 0x08
    260a:	a9 87       	std	Y+9, r26	; 0x09
    260c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <H_LED_Void_LedBlink+0x406>
    2672:	89 e1       	ldi	r24, 0x19	; 25
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <H_LED_Void_LedBlink+0x3f4>
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <H_LED_Void_LedBlink+0x3e8>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <H_LED_Void_LedBlink+0x430>
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	63 e0       	ldi	r22, 0x03	; 3
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    26cc:	eb 96       	adiw	r28, 0x3b	; 59
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	2e 97       	sbiw	r28, 0x0e	; 14
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	64 e0       	ldi	r22, 0x04	; 4
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	65 e0       	ldi	r22, 0x05	; 5
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	67 e0       	ldi	r22, 0x07	; 7
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	67 e0       	ldi	r22, 0x07	; 7
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    2724:	84 e0       	ldi	r24, 0x04	; 4
    2726:	66 e0       	ldi	r22, 0x06	; 6
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_void_SetPinDirection>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e4       	ldi	r25, 0x40	; 64
    2732:	ac e1       	ldi	r26, 0x1C	; 28
    2734:	b6 e4       	ldi	r27, 0x46	; 70
    2736:	8b 87       	std	Y+11, r24	; 0x0b
    2738:	9c 87       	std	Y+12, r25	; 0x0c
    273a:	ad 87       	std	Y+13, r26	; 0x0d
    273c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	98 87       	std	Y+8, r25	; 0x08
    275a:	a9 87       	std	Y+9, r26	; 0x09
    275c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	6b 85       	ldd	r22, Y+11	; 0x0b
    279a:	7c 85       	ldd	r23, Y+12	; 0x0c
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <H_LCD_Void_LCDInt+0x102>
    27c2:	89 e1       	ldi	r24, 0x19	; 25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <H_LCD_Void_LCDInt+0xf0>
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <H_LCD_Void_LCDInt+0xe4>
    27e8:	14 c0       	rjmp	.+40     	; 0x2812 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <H_LCD_Void_LCDInt+0x12c>
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    2812:	83 e3       	ldi	r24, 0x33	; 51
    2814:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    2818:	82 e3       	ldi	r24, 0x32	; 50
    281a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    281e:	88 e2       	ldi	r24, 0x28	; 40
    2820:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    2824:	8c e0       	ldi	r24, 0x0C	; 12
    2826:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>

#endif
}
    2836:	2e 96       	adiw	r28, 0x0e	; 14
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	e9 97       	sbiw	r28, 0x39	; 57
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    285e:	84 e0       	ldi	r24, 0x04	; 4
    2860:	66 e0       	ldi	r22, 0x06	; 6
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    2868:	a8 e3       	ldi	r26, 0x38	; 56
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	89 ad       	ldd	r24, Y+57	; 0x39
    286e:	98 2f       	mov	r25, r24
    2870:	90 7f       	andi	r25, 0xF0	; 240
    2872:	e8 e3       	ldi	r30, 0x38	; 56
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8f 70       	andi	r24, 0x0F	; 15
    287a:	89 2b       	or	r24, r25
    287c:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    287e:	84 e0       	ldi	r24, 0x04	; 4
    2880:	67 e0       	ldi	r22, 0x07	; 7
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e8       	ldi	r26, 0x80	; 128
    288e:	bf e3       	ldi	r27, 0x3F	; 63
    2890:	8d ab       	std	Y+53, r24	; 0x35
    2892:	9e ab       	std	Y+54, r25	; 0x36
    2894:	af ab       	std	Y+55, r26	; 0x37
    2896:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6d a9       	ldd	r22, Y+53	; 0x35
    289a:	7e a9       	ldd	r23, Y+54	; 0x36
    289c:	8f a9       	ldd	r24, Y+55	; 0x37
    289e:	98 ad       	ldd	r25, Y+56	; 0x38
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a e7       	ldi	r20, 0x7A	; 122
    28a6:	53 e4       	ldi	r21, 0x43	; 67
    28a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	89 ab       	std	Y+49, r24	; 0x31
    28b2:	9a ab       	std	Y+50, r25	; 0x32
    28b4:	ab ab       	std	Y+51, r26	; 0x33
    28b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28b8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ba:	7a a9       	ldd	r23, Y+50	; 0x32
    28bc:	8b a9       	ldd	r24, Y+51	; 0x33
    28be:	9c a9       	ldd	r25, Y+52	; 0x34
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	98 ab       	std	Y+48, r25	; 0x30
    28d6:	8f a7       	std	Y+47, r24	; 0x2f
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6d a9       	ldd	r22, Y+53	; 0x35
    28f4:	7e a9       	ldd	r23, Y+54	; 0x36
    28f6:	8f a9       	ldd	r24, Y+55	; 0x37
    28f8:	98 ad       	ldd	r25, Y+56	; 0x38
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	98 ab       	std	Y+48, r25	; 0x30
    2918:	8f a7       	std	Y+47, r24	; 0x2f
    291a:	0f c0       	rjmp	.+30     	; 0x293a <H_LCD_Void_LCDDisplayCharacter+0xf2>
    291c:	89 e1       	ldi	r24, 0x19	; 25
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e a7       	std	Y+46, r25	; 0x2e
    2922:	8d a7       	std	Y+45, r24	; 0x2d
    2924:	8d a5       	ldd	r24, Y+45	; 0x2d
    2926:	9e a5       	ldd	r25, Y+46	; 0x2e
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <H_LCD_Void_LCDDisplayCharacter+0xe0>
    292c:	9e a7       	std	Y+46, r25	; 0x2e
    292e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8f a5       	ldd	r24, Y+47	; 0x2f
    2932:	98 a9       	ldd	r25, Y+48	; 0x30
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	98 ab       	std	Y+48, r25	; 0x30
    2938:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <H_LCD_Void_LCDDisplayCharacter+0xd4>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	69 a9       	ldd	r22, Y+49	; 0x31
    2946:	7a a9       	ldd	r23, Y+50	; 0x32
    2948:	8b a9       	ldd	r24, Y+51	; 0x33
    294a:	9c a9       	ldd	r25, Y+52	; 0x34
    294c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	98 ab       	std	Y+48, r25	; 0x30
    2956:	8f a7       	std	Y+47, r24	; 0x2f
    2958:	8f a5       	ldd	r24, Y+47	; 0x2f
    295a:	98 a9       	ldd	r25, Y+48	; 0x30
    295c:	9c a7       	std	Y+44, r25	; 0x2c
    295e:	8b a7       	std	Y+43, r24	; 0x2b
    2960:	8b a5       	ldd	r24, Y+43	; 0x2b
    2962:	9c a5       	ldd	r25, Y+44	; 0x2c
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    2968:	9c a7       	std	Y+44, r25	; 0x2c
    296a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    296c:	84 e0       	ldi	r24, 0x04	; 4
    296e:	67 e0       	ldi	r22, 0x07	; 7
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 e8       	ldi	r26, 0x80	; 128
    297c:	bf e3       	ldi	r27, 0x3F	; 63
    297e:	8f a3       	std	Y+39, r24	; 0x27
    2980:	98 a7       	std	Y+40, r25	; 0x28
    2982:	a9 a7       	std	Y+41, r26	; 0x29
    2984:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2986:	6f a1       	ldd	r22, Y+39	; 0x27
    2988:	78 a5       	ldd	r23, Y+40	; 0x28
    298a:	89 a5       	ldd	r24, Y+41	; 0x29
    298c:	9a a5       	ldd	r25, Y+42	; 0x2a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a e7       	ldi	r20, 0x7A	; 122
    2994:	53 e4       	ldi	r21, 0x43	; 67
    2996:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8b a3       	std	Y+35, r24	; 0x23
    29a0:	9c a3       	std	Y+36, r25	; 0x24
    29a2:	ad a3       	std	Y+37, r26	; 0x25
    29a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a6:	6b a1       	ldd	r22, Y+35	; 0x23
    29a8:	7c a1       	ldd	r23, Y+36	; 0x24
    29aa:	8d a1       	ldd	r24, Y+37	; 0x25
    29ac:	9e a1       	ldd	r25, Y+38	; 0x26
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	2c f4       	brge	.+10     	; 0x29c8 <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9a a3       	std	Y+34, r25	; 0x22
    29c4:	89 a3       	std	Y+33, r24	; 0x21
    29c6:	3f c0       	rjmp	.+126    	; 0x2a46 <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    29c8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ca:	7c a1       	ldd	r23, Y+36	; 0x24
    29cc:	8d a1       	ldd	r24, Y+37	; 0x25
    29ce:	9e a1       	ldd	r25, Y+38	; 0x26
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	4f e7       	ldi	r20, 0x7F	; 127
    29d6:	57 e4       	ldi	r21, 0x47	; 71
    29d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29dc:	18 16       	cp	r1, r24
    29de:	4c f5       	brge	.+82     	; 0x2a32 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	6f a1       	ldd	r22, Y+39	; 0x27
    29e2:	78 a5       	ldd	r23, Y+40	; 0x28
    29e4:	89 a5       	ldd	r24, Y+41	; 0x29
    29e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e2       	ldi	r20, 0x20	; 32
    29ee:	51 e4       	ldi	r21, 0x41	; 65
    29f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9a a3       	std	Y+34, r25	; 0x22
    2a06:	89 a3       	std	Y+33, r24	; 0x21
    2a08:	0f c0       	rjmp	.+30     	; 0x2a28 <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    2a0a:	89 e1       	ldi	r24, 0x19	; 25
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	98 a3       	std	Y+32, r25	; 0x20
    2a10:	8f 8f       	std	Y+31, r24	; 0x1f
    2a12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a14:	98 a1       	ldd	r25, Y+32	; 0x20
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    2a1a:	98 a3       	std	Y+32, r25	; 0x20
    2a1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a20:	9a a1       	ldd	r25, Y+34	; 0x22
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	9a a3       	std	Y+34, r25	; 0x22
    2a26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a28:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	69 f7       	brne	.-38     	; 0x2a0a <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    2a30:	14 c0       	rjmp	.+40     	; 0x2a5a <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	6b a1       	ldd	r22, Y+35	; 0x23
    2a34:	7c a1       	ldd	r23, Y+36	; 0x24
    2a36:	8d a1       	ldd	r24, Y+37	; 0x25
    2a38:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9a a3       	std	Y+34, r25	; 0x22
    2a44:	89 a3       	std	Y+33, r24	; 0x21
    2a46:	89 a1       	ldd	r24, Y+33	; 0x21
    2a48:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    2a56:	9e 8f       	std	Y+30, r25	; 0x1e
    2a58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    2a5a:	a8 e3       	ldi	r26, 0x38	; 56
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	82 95       	swap	r24
    2a66:	92 95       	swap	r25
    2a68:	90 7f       	andi	r25, 0xF0	; 240
    2a6a:	98 27       	eor	r25, r24
    2a6c:	80 7f       	andi	r24, 0xF0	; 240
    2a6e:	98 27       	eor	r25, r24
    2a70:	98 2f       	mov	r25, r24
    2a72:	e8 e3       	ldi	r30, 0x38	; 56
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	8f 70       	andi	r24, 0x0F	; 15
    2a7a:	89 2b       	or	r24, r25
    2a7c:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2a7e:	84 e0       	ldi	r24, 0x04	; 4
    2a80:	67 e0       	ldi	r22, 0x07	; 7
    2a82:	41 e0       	ldi	r20, 0x01	; 1
    2a84:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e8       	ldi	r26, 0x80	; 128
    2a8e:	bf e3       	ldi	r27, 0x3F	; 63
    2a90:	89 8f       	std	Y+25, r24	; 0x19
    2a92:	9a 8f       	std	Y+26, r25	; 0x1a
    2a94:	ab 8f       	std	Y+27, r26	; 0x1b
    2a96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a e7       	ldi	r20, 0x7A	; 122
    2aa6:	53 e4       	ldi	r21, 0x43	; 67
    2aa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8d 8b       	std	Y+21, r24	; 0x15
    2ab2:	9e 8b       	std	Y+22, r25	; 0x16
    2ab4:	af 8b       	std	Y+23, r26	; 0x17
    2ab6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aba:	7e 89       	ldd	r23, Y+22	; 0x16
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9c 8b       	std	Y+20, r25	; 0x14
    2ad6:	8b 8b       	std	Y+19, r24	; 0x13
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	69 8d       	ldd	r22, Y+25	; 0x19
    2af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9c 8b       	std	Y+20, r25	; 0x14
    2b18:	8b 8b       	std	Y+19, r24	; 0x13
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    2b1c:	89 e1       	ldi	r24, 0x19	; 25
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9a 8b       	std	Y+18, r25	; 0x12
    2b22:	89 8b       	std	Y+17, r24	; 0x11
    2b24:	89 89       	ldd	r24, Y+17	; 0x11
    2b26:	9a 89       	ldd	r25, Y+18	; 0x12
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    2b2c:	9a 8b       	std	Y+18, r25	; 0x12
    2b2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	98 8b       	std	Y+16, r25	; 0x10
    2b5e:	8f 87       	std	Y+15, r24	; 0x0f
    2b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b62:	98 89       	ldd	r25, Y+16	; 0x10
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    2b68:	98 8b       	std	Y+16, r25	; 0x10
    2b6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	67 e0       	ldi	r22, 0x07	; 7
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b7c:	b0 e4       	ldi	r27, 0x40	; 64
    2b7e:	8b 87       	std	Y+11, r24	; 0x0b
    2b80:	9c 87       	std	Y+12, r25	; 0x0c
    2b82:	ad 87       	std	Y+13, r26	; 0x0d
    2b84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	53 e4       	ldi	r21, 0x43	; 67
    2b96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8f 83       	std	Y+7, r24	; 0x07
    2ba0:	98 87       	std	Y+8, r25	; 0x08
    2ba2:	a9 87       	std	Y+9, r26	; 0x09
    2ba4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9e 83       	std	Y+6, r25	; 0x06
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    2c0a:	89 e1       	ldi	r24, 0x19	; 25
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    2c1a:	9c 83       	std	Y+4, r25	; 0x04
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c20:	9e 81       	ldd	r25, Y+6	; 0x06
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	9a 83       	std	Y+2, r25	; 0x02
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    2c5a:	e9 96       	adiw	r28, 0x39	; 57
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	e9 97       	sbiw	r28, 0x39	; 57
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2c82:	84 e0       	ldi	r24, 0x04	; 4
    2c84:	66 e0       	ldi	r22, 0x06	; 6
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    2c8c:	a8 e3       	ldi	r26, 0x38	; 56
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	89 ad       	ldd	r24, Y+57	; 0x39
    2c92:	98 2f       	mov	r25, r24
    2c94:	90 7f       	andi	r25, 0xF0	; 240
    2c96:	e8 e3       	ldi	r30, 0x38	; 56
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	8f 70       	andi	r24, 0x0F	; 15
    2c9e:	89 2b       	or	r24, r25
    2ca0:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	67 e0       	ldi	r22, 0x07	; 7
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e8       	ldi	r26, 0x80	; 128
    2cb2:	bf e3       	ldi	r27, 0x3F	; 63
    2cb4:	8d ab       	std	Y+53, r24	; 0x35
    2cb6:	9e ab       	std	Y+54, r25	; 0x36
    2cb8:	af ab       	std	Y+55, r26	; 0x37
    2cba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2cbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2cc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2cc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a e7       	ldi	r20, 0x7A	; 122
    2cca:	53 e4       	ldi	r21, 0x43	; 67
    2ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	89 ab       	std	Y+49, r24	; 0x31
    2cd6:	9a ab       	std	Y+50, r25	; 0x32
    2cd8:	ab ab       	std	Y+51, r26	; 0x33
    2cda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2cde:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	98 ab       	std	Y+48, r25	; 0x30
    2cfa:	8f a7       	std	Y+47, r24	; 0x2f
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    2cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2d00:	7a a9       	ldd	r23, Y+50	; 0x32
    2d02:	8b a9       	ldd	r24, Y+51	; 0x33
    2d04:	9c a9       	ldd	r25, Y+52	; 0x34
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	6d a9       	ldd	r22, Y+53	; 0x35
    2d18:	7e a9       	ldd	r23, Y+54	; 0x36
    2d1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	98 ab       	std	Y+48, r25	; 0x30
    2d3c:	8f a7       	std	Y+47, r24	; 0x2f
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <H_LCD_Void_LCDWriteCommand+0xf2>
    2d40:	89 e1       	ldi	r24, 0x19	; 25
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9e a7       	std	Y+46, r25	; 0x2e
    2d46:	8d a7       	std	Y+45, r24	; 0x2d
    2d48:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <H_LCD_Void_LCDWriteCommand+0xe0>
    2d50:	9e a7       	std	Y+46, r25	; 0x2e
    2d52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d56:	98 a9       	ldd	r25, Y+48	; 0x30
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	98 ab       	std	Y+48, r25	; 0x30
    2d5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d60:	98 a9       	ldd	r25, Y+48	; 0x30
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <H_LCD_Void_LCDWriteCommand+0xd4>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	69 a9       	ldd	r22, Y+49	; 0x31
    2d6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	98 ab       	std	Y+48, r25	; 0x30
    2d7a:	8f a7       	std	Y+47, r24	; 0x2f
    2d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d80:	9c a7       	std	Y+44, r25	; 0x2c
    2d82:	8b a7       	std	Y+43, r24	; 0x2b
    2d84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d86:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <H_LCD_Void_LCDWriteCommand+0x11c>
    2d8c:	9c a7       	std	Y+44, r25	; 0x2c
    2d8e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	67 e0       	ldi	r22, 0x07	; 7
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e8       	ldi	r26, 0x80	; 128
    2da0:	bf e3       	ldi	r27, 0x3F	; 63
    2da2:	8f a3       	std	Y+39, r24	; 0x27
    2da4:	98 a7       	std	Y+40, r25	; 0x28
    2da6:	a9 a7       	std	Y+41, r26	; 0x29
    2da8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2daa:	6f a1       	ldd	r22, Y+39	; 0x27
    2dac:	78 a5       	ldd	r23, Y+40	; 0x28
    2dae:	89 a5       	ldd	r24, Y+41	; 0x29
    2db0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a e7       	ldi	r20, 0x7A	; 122
    2db8:	53 e4       	ldi	r21, 0x43	; 67
    2dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	8b a3       	std	Y+35, r24	; 0x23
    2dc4:	9c a3       	std	Y+36, r25	; 0x24
    2dc6:	ad a3       	std	Y+37, r26	; 0x25
    2dc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dca:	6b a1       	ldd	r22, Y+35	; 0x23
    2dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dce:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	2c f4       	brge	.+10     	; 0x2dec <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	9a a3       	std	Y+34, r25	; 0x22
    2de8:	89 a3       	std	Y+33, r24	; 0x21
    2dea:	3f c0       	rjmp	.+126    	; 0x2e6a <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    2dec:	6b a1       	ldd	r22, Y+35	; 0x23
    2dee:	7c a1       	ldd	r23, Y+36	; 0x24
    2df0:	8d a1       	ldd	r24, Y+37	; 0x25
    2df2:	9e a1       	ldd	r25, Y+38	; 0x26
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	4c f5       	brge	.+82     	; 0x2e56 <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	6f a1       	ldd	r22, Y+39	; 0x27
    2e06:	78 a5       	ldd	r23, Y+40	; 0x28
    2e08:	89 a5       	ldd	r24, Y+41	; 0x29
    2e0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9a a3       	std	Y+34, r25	; 0x22
    2e2a:	89 a3       	std	Y+33, r24	; 0x21
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <H_LCD_Void_LCDWriteCommand+0x1e0>
    2e2e:	89 e1       	ldi	r24, 0x19	; 25
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	98 a3       	std	Y+32, r25	; 0x20
    2e34:	8f 8f       	std	Y+31, r24	; 0x1f
    2e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e38:	98 a1       	ldd	r25, Y+32	; 0x20
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <H_LCD_Void_LCDWriteCommand+0x1ce>
    2e3e:	98 a3       	std	Y+32, r25	; 0x20
    2e40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	89 a1       	ldd	r24, Y+33	; 0x21
    2e44:	9a a1       	ldd	r25, Y+34	; 0x22
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	9a a3       	std	Y+34, r25	; 0x22
    2e4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <H_LCD_Void_LCDWriteCommand+0x1c2>
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	6b a1       	ldd	r22, Y+35	; 0x23
    2e58:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9a a3       	std	Y+34, r25	; 0x22
    2e68:	89 a3       	std	Y+33, r24	; 0x21
    2e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e70:	8d 8f       	std	Y+29, r24	; 0x1d
    2e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <H_LCD_Void_LCDWriteCommand+0x20a>
    2e7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    2e7e:	a8 e3       	ldi	r26, 0x38	; 56
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	89 ad       	ldd	r24, Y+57	; 0x39
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	82 95       	swap	r24
    2e8a:	92 95       	swap	r25
    2e8c:	90 7f       	andi	r25, 0xF0	; 240
    2e8e:	98 27       	eor	r25, r24
    2e90:	80 7f       	andi	r24, 0xF0	; 240
    2e92:	98 27       	eor	r25, r24
    2e94:	98 2f       	mov	r25, r24
    2e96:	e8 e3       	ldi	r30, 0x38	; 56
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 70       	andi	r24, 0x0F	; 15
    2e9e:	89 2b       	or	r24, r25
    2ea0:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2ea2:	84 e0       	ldi	r24, 0x04	; 4
    2ea4:	67 e0       	ldi	r22, 0x07	; 7
    2ea6:	41 e0       	ldi	r20, 0x01	; 1
    2ea8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	a0 e8       	ldi	r26, 0x80	; 128
    2eb2:	bf e3       	ldi	r27, 0x3F	; 63
    2eb4:	89 8f       	std	Y+25, r24	; 0x19
    2eb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2eb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	4a e7       	ldi	r20, 0x7A	; 122
    2eca:	53 e4       	ldi	r21, 0x43	; 67
    2ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	8d 8b       	std	Y+21, r24	; 0x15
    2ed6:	9e 8b       	std	Y+22, r25	; 0x16
    2ed8:	af 8b       	std	Y+23, r26	; 0x17
    2eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2edc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ede:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e8       	ldi	r20, 0x80	; 128
    2eea:	5f e3       	ldi	r21, 0x3F	; 63
    2eec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	2c f4       	brge	.+10     	; 0x2efe <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
    2efc:	3f c0       	rjmp	.+126    	; 0x2f7c <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    2efe:	6d 89       	ldd	r22, Y+21	; 0x15
    2f00:	7e 89       	ldd	r23, Y+22	; 0x16
    2f02:	8f 89       	ldd	r24, Y+23	; 0x17
    2f04:	98 8d       	ldd	r25, Y+24	; 0x18
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	3f ef       	ldi	r19, 0xFF	; 255
    2f0a:	4f e7       	ldi	r20, 0x7F	; 127
    2f0c:	57 e4       	ldi	r21, 0x47	; 71
    2f0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f12:	18 16       	cp	r1, r24
    2f14:	4c f5       	brge	.+82     	; 0x2f68 <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f16:	69 8d       	ldd	r22, Y+25	; 0x19
    2f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e2       	ldi	r20, 0x20	; 32
    2f24:	51 e4       	ldi	r21, 0x41	; 65
    2f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9c 8b       	std	Y+20, r25	; 0x14
    2f3c:	8b 8b       	std	Y+19, r24	; 0x13
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <H_LCD_Void_LCDWriteCommand+0x2f2>
    2f40:	89 e1       	ldi	r24, 0x19	; 25
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9a 8b       	std	Y+18, r25	; 0x12
    2f46:	89 8b       	std	Y+17, r24	; 0x11
    2f48:	89 89       	ldd	r24, Y+17	; 0x11
    2f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <H_LCD_Void_LCDWriteCommand+0x2e0>
    2f50:	9a 8b       	std	Y+18, r25	; 0x12
    2f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	8b 89       	ldd	r24, Y+19	; 0x13
    2f56:	9c 89       	ldd	r25, Y+20	; 0x14
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9c 8b       	std	Y+20, r25	; 0x14
    2f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f60:	9c 89       	ldd	r25, Y+20	; 0x14
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <H_LCD_Void_LCDWriteCommand+0x2d4>
    2f66:	14 c0       	rjmp	.+40     	; 0x2f90 <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f68:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9c 8b       	std	Y+20, r25	; 0x14
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
    2f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f80:	98 8b       	std	Y+16, r25	; 0x10
    2f82:	8f 87       	std	Y+15, r24	; 0x0f
    2f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f86:	98 89       	ldd	r25, Y+16	; 0x10
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <H_LCD_Void_LCDWriteCommand+0x31c>
    2f8c:	98 8b       	std	Y+16, r25	; 0x10
    2f8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2f90:	84 e0       	ldi	r24, 0x04	; 4
    2f92:	67 e0       	ldi	r22, 0x07	; 7
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	0e 94 a5 06 	call	0xd4a	; 0xd4a <M_DIO_void_SetPinValue>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 ea       	ldi	r26, 0xA0	; 160
    2fa0:	b0 e4       	ldi	r27, 0x40	; 64
    2fa2:	8b 87       	std	Y+11, r24	; 0x0b
    2fa4:	9c 87       	std	Y+12, r25	; 0x0c
    2fa6:	ad 87       	std	Y+13, r26	; 0x0d
    2fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	53 e4       	ldi	r21, 0x43	; 67
    2fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8f 83       	std	Y+7, r24	; 0x07
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	a9 87       	std	Y+9, r26	; 0x09
    2fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6b 85       	ldd	r22, Y+11	; 0x0b
    3006:	7c 85       	ldd	r23, Y+12	; 0x0c
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	0f c0       	rjmp	.+30     	; 0x304c <H_LCD_Void_LCDWriteCommand+0x3e0>
    302e:	89 e1       	ldi	r24, 0x19	; 25
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <H_LCD_Void_LCDWriteCommand+0x3ce>
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <H_LCD_Void_LCDWriteCommand+0x3c2>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <H_LCD_Void_LCDWriteCommand+0x40a>
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    307e:	e9 96       	adiw	r28, 0x39	; 57
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	00 d0       	rcall	.+0      	; 0x3096 <H_Lcd_void_LCDWriteString+0x6>
    3096:	0f 92       	push	r0
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	9b 83       	std	Y+3, r25	; 0x03
    309e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    30a0:	19 82       	std	Y+1, r1	; 0x01
    30a2:	0e c0       	rjmp	.+28     	; 0x30c0 <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	fc 01       	movw	r30, r24
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	80 81       	ld	r24, Z
    30b6:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	fc 01       	movw	r30, r24
    30cc:	e2 0f       	add	r30, r18
    30ce:	f3 1f       	adc	r31, r19
    30d0:	80 81       	ld	r24, Z
    30d2:	88 23       	and	r24, r24
    30d4:	39 f7       	brne	.-50     	; 0x30a4 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(u32 Local_u32_Number )
{
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	65 97       	sbiw	r28, 0x15	; 21
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	6a 8b       	std	Y+18, r22	; 0x12
    30fc:	7b 8b       	std	Y+19, r23	; 0x13
    30fe:	8c 8b       	std	Y+20, r24	; 0x14
    3100:	9d 8b       	std	Y+21, r25	; 0x15
    u8 Local_u8_arr[16]={0};
    3102:	80 e1       	ldi	r24, 0x10	; 16
    3104:	fe 01       	movw	r30, r28
    3106:	32 96       	adiw	r30, 0x02	; 2
    3108:	df 01       	movw	r26, r30
    310a:	98 2f       	mov	r25, r24
    310c:	1d 92       	st	X+, r1
    310e:	9a 95       	dec	r25
    3110:	e9 f7       	brne	.-6      	; 0x310c <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;
    3112:	19 82       	std	Y+1, r1	; 0x01
    3114:	2f c0       	rjmp	.+94     	; 0x3174 <H_Lcd_void_LCDWriteNum+0x92>
    while(Local_u32_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_u32_Number %10;;
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	08 2f       	mov	r16, r24
    311a:	11 27       	eor	r17, r17
    311c:	07 fd       	sbrc	r16, 7
    311e:	10 95       	com	r17
    3120:	8a 89       	ldd	r24, Y+18	; 0x12
    3122:	9b 89       	ldd	r25, Y+19	; 0x13
    3124:	ac 89       	ldd	r26, Y+20	; 0x14
    3126:	bd 89       	ldd	r27, Y+21	; 0x15
    3128:	2a e0       	ldi	r18, 0x0A	; 10
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodsi4>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	28 2f       	mov	r18, r24
    313e:	ce 01       	movw	r24, r28
    3140:	02 96       	adiw	r24, 0x02	; 2
    3142:	fc 01       	movw	r30, r24
    3144:	e0 0f       	add	r30, r16
    3146:	f1 1f       	adc	r31, r17
    3148:	20 83       	st	Z, r18
    	Local_u32_Number /=10;
    314a:	8a 89       	ldd	r24, Y+18	; 0x12
    314c:	9b 89       	ldd	r25, Y+19	; 0x13
    314e:	ac 89       	ldd	r26, Y+20	; 0x14
    3150:	bd 89       	ldd	r27, Y+21	; 0x15
    3152:	2a e0       	ldi	r18, 0x0A	; 10
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodsi4>
    3162:	da 01       	movw	r26, r20
    3164:	c9 01       	movw	r24, r18
    3166:	8a 8b       	std	Y+18, r24	; 0x12
    3168:	9b 8b       	std	Y+19, r25	; 0x13
    316a:	ac 8b       	std	Y+20, r26	; 0x14
    316c:	bd 8b       	std	Y+21, r27	; 0x15
    	Local_s8_Counter ++;
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	89 83       	std	Y+1, r24	; 0x01
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(u32 Local_u32_Number )
{
    u8 Local_u8_arr[16]={0};
    s8 Local_s8_Counter =0;
    while(Local_u32_Number !=0)
    3174:	8a 89       	ldd	r24, Y+18	; 0x12
    3176:	9b 89       	ldd	r25, Y+19	; 0x13
    3178:	ac 89       	ldd	r26, Y+20	; 0x14
    317a:	bd 89       	ldd	r27, Y+21	; 0x15
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	a1 05       	cpc	r26, r1
    3180:	b1 05       	cpc	r27, r1
    3182:	49 f6       	brne	.-110    	; 0x3116 <H_Lcd_void_LCDWriteNum+0x34>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_u32_Number %10;;
    	Local_u32_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	81 50       	subi	r24, 0x01	; 1
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	11 c0       	rjmp	.+34     	; 0x31ae <H_Lcd_void_LCDWriteNum+0xcc>
    while(Local_s8_Counter >= 0)
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	28 2f       	mov	r18, r24
    3190:	33 27       	eor	r19, r19
    3192:	27 fd       	sbrc	r18, 7
    3194:	30 95       	com	r19
    3196:	ce 01       	movw	r24, r28
    3198:	02 96       	adiw	r24, 0x02	; 2
    319a:	fc 01       	movw	r30, r24
    319c:	e2 0f       	add	r30, r18
    319e:	f3 1f       	adc	r31, r19
    31a0:	80 81       	ld	r24, Z
    31a2:	80 5d       	subi	r24, 0xD0	; 208
    31a4:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	81 50       	subi	r24, 0x01	; 1
    31ac:	89 83       	std	Y+1, r24	; 0x01
    	Local_u8_arr [Local_s8_Counter] = Local_u32_Number %10;;
    	Local_u32_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    while(Local_s8_Counter >= 0)
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	88 23       	and	r24, r24
    31b2:	64 f7       	brge	.-40     	; 0x318c <H_Lcd_void_LCDWriteNum+0xaa>
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    	Local_s8_Counter--;
    }


}
    31b4:	65 96       	adiw	r28, 0x15	; 21
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	08 95       	ret

000031ca <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <H_Lcd_void_LCDGoToXY+0x6>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <H_Lcd_void_LCDGoToXY+0x8>
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	8b 83       	std	Y+3, r24	; 0x03
    31d8:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	a0 f4       	brcc	.+40     	; 0x3208 <H_Lcd_void_LCDGoToXY+0x3e>
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	80 31       	cpi	r24, 0x10	; 16
    31e4:	88 f4       	brcc	.+34     	; 0x3208 <H_Lcd_void_LCDGoToXY+0x3e>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    31e6:	80 e8       	ldi	r24, 0x80	; 128
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	80 ec       	ldi	r24, 0xC0	; 192
    31ec:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	fc 01       	movw	r30, r24
    31fa:	e2 0f       	add	r30, r18
    31fc:	f3 1f       	adc	r31, r19
    31fe:	90 81       	ld	r25, Z
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	89 0f       	add	r24, r25
    3204:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
		}

}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	29 97       	sbiw	r28, 0x09	; 9
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	6a 83       	std	Y+2, r22	; 0x02
    322e:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    3230:	80 e6       	ldi	r24, 0x60	; 96
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 48 18 	call	0x3090	; 0x3090 <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3238:	19 86       	std	Y+9, r1	; 0x09
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	8a 30       	cpi	r24, 0x0A	; 10
    323e:	10 f0       	brcs	.+4      	; 0x3244 <H_Lcd_void_LCDClockDisplay+0x2e>
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	29 87       	std	Y+9, r18	; 0x09
    3244:	18 86       	std	Y+8, r1	; 0x08
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	8a 30       	cpi	r24, 0x0A	; 10
    324a:	10 f0       	brcs	.+4      	; 0x3250 <H_Lcd_void_LCDClockDisplay+0x3a>
    324c:	31 e0       	ldi	r19, 0x01	; 1
    324e:	38 87       	std	Y+8, r19	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	98 85       	ldd	r25, Y+8	; 0x08
    3254:	89 2b       	or	r24, r25
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	3f 83       	std	Y+7, r19	; 0x07
    325c:	2e 83       	std	Y+6, r18	; 0x06
    325e:	1d 82       	std	Y+5, r1	; 0x05
    3260:	1c 82       	std	Y+4, r1	; 0x04
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	8a 30       	cpi	r24, 0x0A	; 10
    3266:	20 f0       	brcs	.+8      	; 0x3270 <H_Lcd_void_LCDClockDisplay+0x5a>
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9d 83       	std	Y+5, r25	; 0x05
    326e:	8c 83       	std	Y+4, r24	; 0x04
    3270:	8e 81       	ldd	r24, Y+6	; 0x06
    3272:	9f 81       	ldd	r25, Y+7	; 0x07
    3274:	2c 81       	ldd	r18, Y+4	; 0x04
    3276:	3d 81       	ldd	r19, Y+5	; 0x05
    3278:	82 2b       	or	r24, r18
    327a:	93 2b       	or	r25, r19
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	d1 f1       	breq	.+116    	; 0x32f4 <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	67 e0       	ldi	r22, 0x07	; 7
    3284:	0e 94 e5 18 	call	0x31ca	; 0x31ca <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    3288:	86 e6       	ldi	r24, 0x66	; 102
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 48 18 	call	0x3090	; 0x3090 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	67 e0       	ldi	r22, 0x07	; 7
    3294:	0e 94 e5 18 	call	0x31ca	; 0x31ca <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a0 e0       	ldi	r26, 0x00	; 0
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	8a 30       	cpi	r24, 0x0A	; 10
    32ae:	18 f4       	brcc	.+6      	; 0x32b6 <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    32b0:	80 e2       	ldi	r24, 0x20	; 32
    32b2:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    32b6:	8a e3       	ldi	r24, 0x3A	; 58
    32b8:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	88 2f       	mov	r24, r24
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	a0 e0       	ldi	r26, 0x00	; 0
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	8a 30       	cpi	r24, 0x0A	; 10
    32d2:	18 f4       	brcc	.+6      	; 0x32da <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    32d4:	80 e2       	ldi	r24, 0x20	; 32
    32d6:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    32da:	8a e3       	ldi	r24, 0x3A	; 58
    32dc:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	88 2f       	mov	r24, r24
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	a0 e0       	ldi	r26, 0x00	; 0
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
    32f2:	2d c0       	rjmp	.+90     	; 0x334e <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	67 e0       	ldi	r22, 0x07	; 7
    32f8:	0e 94 e5 18 	call	0x31ca	; 0x31ca <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    32fc:	8e e6       	ldi	r24, 0x6E	; 110
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 48 18 	call	0x3090	; 0x3090 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	67 e0       	ldi	r22, 0x07	; 7
    3308:	0e 94 e5 18 	call	0x31ca	; 0x31ca <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	88 2f       	mov	r24, r24
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 e0       	ldi	r26, 0x00	; 0
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    331e:	8a e3       	ldi	r24, 0x3A	; 58
    3320:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3336:	8a e3       	ldi	r24, 0x3A	; 58
    3338:	0e 94 24 14 	call	0x2848	; 0x2848 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	88 2f       	mov	r24, r24
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <H_Lcd_void_LCDWriteNum>
	}


}
    334e:	29 96       	adiw	r28, 0x09	; 9
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <H_LCD_Void_LCDWriteCommand>
}
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <main>:

#include "main.h"      ///*** this is a header file to contain all includes of Application


int main ()
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62

  H_LCD_Void_LCDInt();
    337c:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LCD_Void_LCDInt>

  H_Lcd_void_LCDClockDisplay(3,14,10);
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	6e e0       	ldi	r22, 0x0E	; 14
    3384:	4a e0       	ldi	r20, 0x0A	; 10
    3386:	0e 94 0b 19 	call	0x3216	; 0x3216 <H_Lcd_void_LCDClockDisplay>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0





}
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <__udivmodqi4>:
    3394:	99 1b       	sub	r25, r25
    3396:	79 e0       	ldi	r23, 0x09	; 9
    3398:	04 c0       	rjmp	.+8      	; 0x33a2 <__udivmodqi4_ep>

0000339a <__udivmodqi4_loop>:
    339a:	99 1f       	adc	r25, r25
    339c:	96 17       	cp	r25, r22
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <__udivmodqi4_ep>
    33a0:	96 1b       	sub	r25, r22

000033a2 <__udivmodqi4_ep>:
    33a2:	88 1f       	adc	r24, r24
    33a4:	7a 95       	dec	r23
    33a6:	c9 f7       	brne	.-14     	; 0x339a <__udivmodqi4_loop>
    33a8:	80 95       	com	r24
    33aa:	08 95       	ret

000033ac <__udivmodsi4>:
    33ac:	a1 e2       	ldi	r26, 0x21	; 33
    33ae:	1a 2e       	mov	r1, r26
    33b0:	aa 1b       	sub	r26, r26
    33b2:	bb 1b       	sub	r27, r27
    33b4:	fd 01       	movw	r30, r26
    33b6:	0d c0       	rjmp	.+26     	; 0x33d2 <__udivmodsi4_ep>

000033b8 <__udivmodsi4_loop>:
    33b8:	aa 1f       	adc	r26, r26
    33ba:	bb 1f       	adc	r27, r27
    33bc:	ee 1f       	adc	r30, r30
    33be:	ff 1f       	adc	r31, r31
    33c0:	a2 17       	cp	r26, r18
    33c2:	b3 07       	cpc	r27, r19
    33c4:	e4 07       	cpc	r30, r20
    33c6:	f5 07       	cpc	r31, r21
    33c8:	20 f0       	brcs	.+8      	; 0x33d2 <__udivmodsi4_ep>
    33ca:	a2 1b       	sub	r26, r18
    33cc:	b3 0b       	sbc	r27, r19
    33ce:	e4 0b       	sbc	r30, r20
    33d0:	f5 0b       	sbc	r31, r21

000033d2 <__udivmodsi4_ep>:
    33d2:	66 1f       	adc	r22, r22
    33d4:	77 1f       	adc	r23, r23
    33d6:	88 1f       	adc	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	1a 94       	dec	r1
    33dc:	69 f7       	brne	.-38     	; 0x33b8 <__udivmodsi4_loop>
    33de:	60 95       	com	r22
    33e0:	70 95       	com	r23
    33e2:	80 95       	com	r24
    33e4:	90 95       	com	r25
    33e6:	9b 01       	movw	r18, r22
    33e8:	ac 01       	movw	r20, r24
    33ea:	bd 01       	movw	r22, r26
    33ec:	cf 01       	movw	r24, r30
    33ee:	08 95       	ret

000033f0 <__prologue_saves__>:
    33f0:	2f 92       	push	r2
    33f2:	3f 92       	push	r3
    33f4:	4f 92       	push	r4
    33f6:	5f 92       	push	r5
    33f8:	6f 92       	push	r6
    33fa:	7f 92       	push	r7
    33fc:	8f 92       	push	r8
    33fe:	9f 92       	push	r9
    3400:	af 92       	push	r10
    3402:	bf 92       	push	r11
    3404:	cf 92       	push	r12
    3406:	df 92       	push	r13
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	ca 1b       	sub	r28, r26
    341a:	db 0b       	sbc	r29, r27
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	09 94       	ijmp

00003428 <__epilogue_restores__>:
    3428:	2a 88       	ldd	r2, Y+18	; 0x12
    342a:	39 88       	ldd	r3, Y+17	; 0x11
    342c:	48 88       	ldd	r4, Y+16	; 0x10
    342e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3430:	6e 84       	ldd	r6, Y+14	; 0x0e
    3432:	7d 84       	ldd	r7, Y+13	; 0x0d
    3434:	8c 84       	ldd	r8, Y+12	; 0x0c
    3436:	9b 84       	ldd	r9, Y+11	; 0x0b
    3438:	aa 84       	ldd	r10, Y+10	; 0x0a
    343a:	b9 84       	ldd	r11, Y+9	; 0x09
    343c:	c8 84       	ldd	r12, Y+8	; 0x08
    343e:	df 80       	ldd	r13, Y+7	; 0x07
    3440:	ee 80       	ldd	r14, Y+6	; 0x06
    3442:	fd 80       	ldd	r15, Y+5	; 0x05
    3444:	0c 81       	ldd	r16, Y+4	; 0x04
    3446:	1b 81       	ldd	r17, Y+3	; 0x03
    3448:	aa 81       	ldd	r26, Y+2	; 0x02
    344a:	b9 81       	ldd	r27, Y+1	; 0x01
    344c:	ce 0f       	add	r28, r30
    344e:	d1 1d       	adc	r29, r1
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	ed 01       	movw	r28, r26
    345c:	08 95       	ret

0000345e <_exit>:
    345e:	f8 94       	cli

00003460 <__stop_program>:
    3460:	ff cf       	rjmp	.-2      	; 0x3460 <__stop_program>
